@using System.Text.Json
@inject AuthenticationStateProvider AuthStateProvider
@inject IJSRuntime JS
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager Navigation
<div class="header">
    <div class="container-fluid">
        <div class="row align-items-center">
            <div class="logo ml-40">
                <img src="images/logo.svg" alt="Logo" style="width:150px; height:40px;object-fit:cover; " />
            </div>
 
            <div class="button" style = "margin-top:-40px;">
                <div class="nav-links">
                    <a href="/">Trang ch·ªß</a>
                    <a href="/revision">Th∆∞ vi·ªán</a>
                    <a href="/supscription">Mua g√≥i</a>
                    <div style= "font-size:30px;font-weight:900;color:#1D059D;">|</div>
                   
                    @if (isLoggedIn)
                    {
                        <div class="user-profile">
                            <div class="profile-avatar">
                                <a class="avatar-icon" href="/profile">üë§ </a>
                               
                            </div>
                            <button @onclick="Logout" class="btn btn-link text-danger">ƒêƒÉng xu·∫•t</button>
                        </div>
                    }
                    else
                    {
                        <a href="/login">ƒêƒÉng nh·∫≠p</a>
                        <a href="/register">ƒêƒÉng k√≠</a>
                    }

                </div> <!-- nav-links -->
            </div> <!-- col -->
        </div> <!-- row -->
    </div> <!-- container-fluid -->
</div> <!-- header -->

<style>
/* ƒê·∫©y n·ªôi dung xu·ªëng d∆∞·ªõi ƒë·ªÉ kh√¥ng b·ªã header ƒë√® */
body {
    margin: 0;
    padding-top: 80px; /* ch·ªânh ƒë√∫ng chi·ªÅu cao header */
}

/* Header lu√¥n c·ªë ƒë·ªãnh */
.header {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 9999; /* cho ch·∫Øc ch·∫Øn n·∫±m tr√™n c√πng */
    background: rgba(255, 255, 255, 0.95);
    backdrop-filter: blur(10px);
    padding: 15px 0;
    box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
    font-family: 'Baloo 2', cursive;
    font-weight: 600;
    width: 100%;
}

/* Menu nav-links */
.nav-links {
    display: flex;
    align-items: center;
    justify-content: flex-end; /* cƒÉn ph·∫£i */
    gap: 30px;
    top:0px;
}

.nav-links a {
    text-decoration: none;
    color: #090231;
    font-weight: 600;
    font-size: 16px;
    transition: all 0.3s ease;
    position: relative;
    cursor: pointer;
    padding:5px 10px;
}

.nav-links a:hover {
    color: #FFFFFF;
    font-weight : 900;
    transform: translateY(-2px);
    background : #1D059D;
    border-radius :8px;
   
}



/* Avatar user */
.user-profile {
    display: flex;
    align-items: center;
}

.profile-avatar {
    width: 40px;
    height: 40px;
    background: linear-gradient(135deg, #FFB6D6, #37E4FF);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.3s ease;
}

.profile-avatar:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(55, 228, 255, 0.3);
}

.avatar-icon {
    color: white;
    font-size: 1.2rem;
}
</style>
@code {
    private bool isLoggedIn = false;
    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "authToken");
        var userJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userInfo");

        if (!string.IsNullOrEmpty(token))
        {
            isLoggedIn = true;
            if (!string.IsNullOrEmpty(userJson))
            {
                try
                {
                    var user = JsonSerializer.Deserialize<UserModel>(userJson);
                    userName = user?.FullName ?? "Ng∆∞·ªùi d√πng";
                }
                catch { }
            }
        }
    }

    public class UserModel
    {
        public string FullName { get; set; }
        public string Email { get; set; }
    }

    private async Task Logout()
    {
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authToken");
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userInfo");
        isLoggedIn = false;
        Navigation.NavigateTo("/", true);
    }
}