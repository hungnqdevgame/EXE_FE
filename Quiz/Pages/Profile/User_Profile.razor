@page "/profile"
@using System.IO
@inject NavigationManager Navigate

@inject IJSRuntime JS


<div class="profile-container">
    <div class="sidebar">
        <div class="avatar-section">
            <div class="avatar-wrapper">
                @if (!string.IsNullOrEmpty(avatarUrl))
                {
                    <img src="@avatarUrl" alt="Avatar" class="avatar-image" />
                }
                else
                {
                    <div class="avatar-placeholder">
                        <svg width="80" height="80" viewBox="0 0 24 24" fill="white">
                            <path d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"/>
                        </svg>
                    </div>
                }
                <label class="camera-icon" for="avatarInput">
                    📷
                </label>
                <InputFile id="avatarInput" OnChange="HandleAvatarUpload" accept="image/*" style="display:none;" />
            </div>
            <h2 class="user-name">@userProfile.FullName</h2>
        </div>

        <nav class="sidebar-menu">
            <a href="#" class="menu-item active" @onclick="() => SelectTab(0)">
                <span class="icon">👤</span> Thông tin cá nhân
            </a>
            @* <a href="#" class="menu-item" @onclick="() => SelectTab(1)">
                <span class="icon">🕐</span> Lịch sử ôn tập
            </a>
            <a href="#" class="menu-item" @onclick="() => SelectTab(2)">
                <span class="icon">📄</span> Tài liệu đã tải lên
            </a>
            <a href="#" class="menu-item" @onclick="() => SelectTab(3)">
                <span class="icon">⚙️</span> Cài đặt và thông báo
            </a> *@
            <a href="#" class="menu-item" @onclick="Logout">
                <span class="icon">↪️</span> Đăng xuất
            </a>
        </nav>
    </div>

    <div class="main-content">
        <div class="combined-card">
            <div class="info-card">
                <div class="card-header">
                    <h3 >Thông tin cá nhân 
                        <button class="edit-btn" @onclick="ToggleEdit">✏️</button>
                    </h3>
                </div>

            <div class="info-grid">
                <div class="info-item">
                    <span class="icon">👤</span>
                    <div class="info-details">
                        <label>Họ và tên:</label>
                        @if (isEditing)
                        {
                            <input @bind="userProfile.FullName" class="edit-input" />
                        }
                        else
                        {
                            <span>@userProfile.FullName</span>
                        }
                    </div>
                </div>

                <div class="info-item">
                    <span class="icon">✉️</span>
                    <div class="info-details">
                        <label>Email:</label>
                        @if (isEditing)
                        {
                            <input @bind="userProfile.Email" class="edit-input" type="email" />
                        }
                        else
                        {
                            <span>@userProfile.Email</span>
                        }
                    </div>
                </div>

                <div class="info-item">
                    <span class="icon">🎂</span>
                    <div class="info-details">
                        <label>Ngày sinh:</label>
                        @if (isEditing)
                        {
                            <input @bind="userProfile.DateOfBirth" class="edit-input" type="string" />
                        }
                        else
                        {
                            <span>@userProfile.DateOfBirth</span>
                        }
                    </div>
                </div>

                @* <div class="info-item">
                    <span class="icon">🎓</span>
                    <div class="info-details">
                        <label>Nghề nghiệp:</label>
                        @if (isEditing)
                        {
                            <input @bind="userProfile.Profession" class="edit-input" />
                        }
                        else
                        {
                            <span>@userProfile.Profession</span>
                        }
                    </div>
                </div>

                <div class="info-item">
                    <span class="icon">🏫</span>
                    <div class="info-details">
                        <label>Trường học:</label>
                        @if (isEditing)
                        {
                            <input @bind="userProfile.School" class="edit-input" />
                        }
                        else
                        {
                            <span>@userProfile.School</span>
                        }
                    </div>
                </div> *@

                <div class="info-item">
                    <span class="icon">📝</span>
                    <div class="info-details">
                        <label>Gói đăng ký:</label>
                        <span>@userProfile.SubscriptionType</span>
                    </div>
                </div>
            </div>

            @if (isEditing)
            {
                <div class="edit-actions">
                    <button class="btn-cancel" @onclick="CancelEdit">Hủy</button>
                    <button class="btn-save" @onclick="SaveProfile">Lưu thay đổi</button>
                </div>
            }
            </div>

            <div class="upgrade-card">
            <h3>Nâng cấp để học tập hiệu quả hơn</h3>
            <div class="features-grid">
                <div class="feature-item">
                    <span class="check-icon">
                             <img src="images/tick1.png"  width="100" height="100">
                    </span>
                    <div>
                        <strong>Upload tài liệu</strong>
                        <p>không giới hạn</p>
                    </div>
                </div>
                <div class="feature-item">
                    <span class="check-icon">
                        <img src="images/tick1.png"  width="100" height="100">
                    </span>
                    <div>
                        <strong>Làm bài kiểm tra từ quiz</strong>
                        <p>không giới hạn</p>
                    </div>
                </div>
                <div class="feature-item">
                    <span class="check-icon">
                        <img src="images/tick1.png"  width="100" height="100">
                    </span>
                    <div>
                        <strong>Tạo quiz trên tài liệu</strong>
                        <p>không giới hạn</p>
                    </div>
                </div>
                <div class="feature-item">
                    <span class="check-icon">
                        <img src="images/tick1.png"  width="100" height="100">
                    </span>
                    <div>
                        <strong>AI nâng cao</strong>
                        <p>khuyên nghị thêm câu hỏi nâng cao của kiến thức</p>
                    </div>
                </div>
            </div>
            <button class="upgrade-btn" @onclick="() => NavigateToTab(1)">MUA GÓI</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string avatarUrl = "";
    private bool isEditing = false;
    private int selectedTab = 0;

    private UserProfile userProfile = new UserProfile
    {
        FullName = "Nguyễn Văn A",
        Email = "NguyenA@gmail.com",
        DateOfBirth = "01/01/2000",
        Profession = "Học sinh",
        School = "FPT",
        SubscriptionType = "Basic"
    };

    private UserProfile originalProfile;

    public void NavigateToTab(int tab)
    {
     if(tab == 1)
        {
            Navigate.NavigateTo("/price");
        }
    }
    protected override void OnInitialized()
    {
        originalProfile = new UserProfile
        {
            FullName = userProfile.FullName,
            Email = userProfile.Email,
            DateOfBirth = userProfile.DateOfBirth,
            Profession = userProfile.Profession,
            School = userProfile.School,
            SubscriptionType = userProfile.SubscriptionType
        };
    }

    private async Task HandleAvatarUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).ReadAsync(buffer);
            var base64 = Convert.ToBase64String(buffer);
            avatarUrl = $"data:{file.ContentType};base64,{base64}";
            
            // TODO: Upload to server
            // await UploadToServer(file);
        }
    }

    private void ToggleEdit()
    {
        isEditing = !isEditing;
        if (!isEditing)
        {
            CancelEdit();
        }
    }

    private void CancelEdit()
    {
        isEditing = false;
        userProfile.FullName = originalProfile.FullName;
        userProfile.Email = originalProfile.Email;
        userProfile.DateOfBirth = originalProfile.DateOfBirth;
        userProfile.Profession = originalProfile.Profession;
        userProfile.School = originalProfile.School;
    }

    private async Task SaveProfile()
    {
        isEditing = false;
        originalProfile = new UserProfile
        {
            FullName = userProfile.FullName,
            Email = userProfile.Email,
            DateOfBirth = userProfile.DateOfBirth,
            Profession = userProfile.Profession,
            School = userProfile.School,
            SubscriptionType = userProfile.SubscriptionType
        };
        
        // TODO: Save to server
        await JS.InvokeVoidAsync("alert", "Đã lưu thông tin thành công!");
    }

    private void SelectTab(int tabIndex)
    {
        selectedTab = tabIndex;
    }

    private void Logout()
    {
        // TODO: Implement logout logic
    }

    public class UserProfile
    {
        public string FullName { get; set; }
        public string Email { get; set; }
        public string DateOfBirth { get; set; }
        public string Profession { get; set; }
        public string School { get; set; }
        public string SubscriptionType { get; set; }
    }
}

<style>
    .profile-container {
        display: flex;
        min-height: 100vh;
        background: white;
        gap: 20px;
        padding: 20px;
         font-family: 'Baloo 2', cursive;
    }

    .sidebar {
        background: #D5CEFD;
        width: 320px;
        border-radius: 20px;
        padding: 30px 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }

    .avatar-section {
        text-align: center;
        margin-bottom: 30px;
    }

    .avatar-wrapper {
        position: relative;
        width: 140px;
        height: 140px;
        margin: 0 auto 15px;
    }

    .avatar-image, .avatar-placeholder {
        width: 140px;
        height: 140px;
        border-radius: 50%;
        object-fit: cover;
        background: linear-gradient(135deg, #FFA500 0%, #FF8C00 100%);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .camera-icon {
        position: absolute;
        bottom: 5px;
        right: 5px;
        background: #4a4a4a;
        color: white;
        width: 35px;
        height: 35px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 18px;
        transition: all 0.3s;
    }

    .camera-icon:hover {
        background: #333;
        transform: scale(1.1);
    }

    .user-name {
        color: #2a1a5e;
        font-size: 24px;
        font-weight: 600;
        margin-top: 10px;
    }

    .sidebar-menu {
        display: flex;
        flex-direction: column;
        gap: 8px;
        background : D5CEFD;
    }

    .menu-item {
        display: flex;
        align-items: center;
        padding: 14px 18px;
        color: #4a4a4a;
        text-decoration: none;
        border-radius: 10px;
        transition: all 0.3s;
        font-size: 15px;
    }

    .menu-item:hover {
        background: rgba(255,255,255,0.3);
        transform: translateX(5px);
    }

    .menu-item.active {
        background: #1D059D;
        color: white;
        font-weight: 500;
    }

    .menu-item .icon {
        margin-right: 12px;
        font-size: 18px;
    }

    .main-content {
        flex: 1;
    }

    .combined-card {
        background: #1D059D;
        border-radius: 20px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        overflow: hidden;
    }

    .info-card, .upgrade-card {
        padding: 35px;
        color: white;
        
    }

    .info-card {
        border-bottom: 1px solid rgba(255,255,255,0.1);
    }

    .card-header {
        display: flex;
        align-items: center;
        margin-bottom: 30px;
    }

    .card-header h3 {
        font-size: 30px;
        font-weight: 900;
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .edit-btn {
        background: transparent;
        border: none;
        color: white;
        font-size: 18px;
        cursor: pointer;
        padding: 5px 8px;
        transition: transform 0.2s;
        display: inline-flex;
        align-items: center;
    }

    .edit-btn:hover {
        transform: scale(1.2);
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 25px;
    }

    .info-item {
        display: flex;
        align-items: flex-start;
        gap: 15px;
         font-family: 'Baloo 2', cursive;
         
    }

    .info-item .icon {
        font-size: 30px;
        margin-top: 5px;
    }

    .info-details {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 8px;
        color : white;
        font-weight : 600;
    }

    .info-details label {
        font-size: 20px;
        color: white;
        font-weight : 600;
    }

    .info-details span {
        font-size: 16px;
        font-weight: 500;
    }

    .edit-input {
        background: rgba(255,255,255,0.1);
        border: 1px solid rgba(255,255,255,0.3);
        border-radius: 8px;
        padding: 8px 12px;
        color: white;
        font-size: 16px;
        width: 100%;
    }

    .edit-input:focus {
        outline: none;
        border-color: #a8a8ff;
    }

    .edit-actions {
        display: flex;
        gap: 15px;
        justify-content: flex-end;
        margin-top: 30px;
    }

    .btn-cancel, .btn-save {
        padding: 12px 30px;
        border: none;
        border-radius: 10px;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-cancel {
        background: transparent;
        border: 2px solid white;
        color: white;
    }

    .btn-cancel:hover {
        background: rgba(255,255,255,0.1);
    }

    .btn-save {
        background: linear-gradient(135deg, #e85d75 0%, #d44562 100%);
        color: white;
    }

    .btn-save:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(232, 93, 117, 0.4);
    }

    .upgrade-card h3 {
        font-size: 30px;
        margin-bottom: 25px;
        font-weight : 900;
    }

    .features-grid {
        background: #D5CEFD;
        border-radius: 15px;
        padding: 25px;
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 20px;
        margin-bottom: 25px;
    }

    .feature-item {
        display: flex;
        gap: 12px;
        align-items: flex-start;
        color : #1D059D;
          font-family: 'Baloo 2', cursive;
          font-size : 24px;
    }

    .check-icon {
        background: rgba(255,255,255,0.2);
        width: 40px;
        height: 28px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 16px;
        flex-shrink: 0;
        margin-top:20px;
    }

    .feature-item strong {
        display: block;
        margin-bottom: 5px;
        font-size: 24px;
    }

    .feature-item p {
        color: #1D059D;
        font-size: 18px;
        margin: 0;
    }

    .upgrade-btn {
        width: 70%;
        background: #C93668;
        color: white;
        border: none;
        padding: 16px;
        border-radius: 12px;
        font-size: 18px;
        font-weight: 700;
        cursor: pointer;
        transition: all 0.3s;
         display: block; /* hoặc inline-block cũng được */
    margin: 0 auto;
    }

    .upgrade-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(232, 93, 117, 0.5);
    }

    @@media (max-width: 1024px) {
        .profile-container {
            flex-direction: column;
        }

        .sidebar {
            width: 100%;
        }

        .info-grid, .features-grid {
            grid-template-columns: 1fr;
        }
    }
</style>