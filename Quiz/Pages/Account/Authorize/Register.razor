@page "/register"
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@using Quiz.Shared
@using Share
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<Header />
<div class="form-header">
    <h2>ĐĂNG KÝ</h2>
</div>
<div class="register-container">
    <div class="register-content">
        <div class="form-section">
            <EditForm Model="@registrationModel" OnValidSubmit="@HandleRegistration">
                <DataAnnotationsValidator />

                <div class="form-group">
                    <InputText @bind-Value="registrationModel.FullName" placeholder="Họ và tên:" class="form-input" />
                    <ValidationMessage For="@(() => registrationModel.FullName)" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="registrationModel.Phone" placeholder="Số điện thoại:" class="form-input" />
                    <ValidationMessage For="@(() => registrationModel.Phone)" />
                </div>

                <div class="form-group">
                    <InputText @bind-Value="registrationModel.Email" placeholder="Email:" class="form-input" />
                    <ValidationMessage For="@(() => registrationModel.Email)" />
                </div>

                <div class="form-group">
                    <InputText type="password" @bind-Value="registrationModel.Password" placeholder="Mật khẩu:" class="form-input" />
                    <ValidationMessage For="@(() => registrationModel.Password)" />
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        ❌ @errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="success-message">
                        ✓ @successMessage
                    </div>
                }

                <button type="submit" class="register-btn" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner"></span>
                        <span>Đang xử lý...</span>
                    }
                    else
                    {
                        <span>ĐĂNG KÝ</span>
                    }
                </button>
            </EditForm>

            <div class="divider">
                <span>HOẶC</span>
            </div>

            <div class="social-buttons">
                <button type="button" class="google-btn" @onclick="LoginWithGoogleAsync">
                    <img src="images/google_logo_1.png" alt="Google" style="width:50px; height:50px; margin-left:10px;" />
                </button>
            </div>

            <div class="login-link">
                <span>Bạn đã có tài khoản? <a href="/login" style="text-decoration: underline;"> Đăng nhập</a></span>
            </div>
        </div>
    </div>
</div>
<Quiz.Shared.Footer />

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .register-container {
        font-family: 'Baloo 2', cursive;
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: flex-end;
        width: 40%;
        margin-left: 700px;
    }

    .register-content {
        background: #1D059D;
        border-radius: 20px;
        display: flex;
        max-width: 1000px;
        width: 100%;
        min-height: 600px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        backdrop-filter: blur(10px);
    }

    .form-section {
        flex: 1;
        padding: 60px 40px;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .form-header h2 {
        color: #000000;
        font-size: 2rem;
        font-weight: 600;
        text-align: center;
        margin-bottom: 30px;
        font-family: 'Baloo 2', cursive;
        margin-left: 500px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-input {
        width: 100%;
        padding: 15px 20px;
        border: 2px solid #e1e5e9;
        border-radius: 25px;
        font-size: 1rem;
        font-family: 'Baloo 2', cursive;
        background: rgba(255, 255, 255, 0.8);
        transition: all 0.3s ease;
        box-sizing: border-box;
    }

    .form-input:focus {
        outline: none;
        border-color: #D5CEFD;
        box-shadow: 0 0 0 3px rgba(55, 228, 255, 0.1);
        background: white;
    }

    .form-input::placeholder {
        color: #999;
        font-weight: 400;
    }

    /* Success and Error Messages */
    .success-message,
    .error-message {
        padding: 12px 20px;
        border-radius: 15px;
        margin-bottom: 20px;
        font-weight: 600;
        text-align: center;
        animation: slideIn 0.3s ease-out;
    }

    .success-message {
        background: #d1fae5;
        color: #065f46;
        border: 2px solid #10b981;
    }

    .error-message {
        background: #fee2e2;
        color: #991b1b;
        border: 2px solid #ef4444;
    }

    @@keyframes slideIn {
        from {
            opacity: 0;
            transform: translateY(-10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .register-btn {
        background: #C93668;
        border: none;
        border-radius: 15px;
        padding: 15px;
        font-size: 18px;
        font-weight: 600;
        color: white;
        width: 100%;
        margin-bottom: 25px;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
    }

    .register-btn:hover:not(:disabled) {
        transform: translateY(-2px);
        box-shadow: 0 8px 16px rgba(255, 182, 214, 0.4);
    }

    .register-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    /* Spinner */
    .spinner {
        width: 20px;
        height: 20px;
        border: 3px solid rgba(255, 255, 255, 0.3);
        border-top-color: white;
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .divider {
        display: flex;
        align-items: center;
        margin: 25px 0;
    }

    .divider::before,
    .divider::after {
        content: '';
        flex: 1;
        height: 1px;
        background: #e0e0e0;
    }

    .divider span {
        padding: 0 20px;
        color: #FFFFFF;
        font-weight: 500;
    }

    .social-buttons {
        display: flex;
        gap: 15px;
        justify-content: center;
        margin-bottom: 20px;
    }

    .google-btn {
        border: none;
        background: transparent;
        cursor: pointer;
        transition: transform 0.3s ease;
    }

    .google-btn:hover {
        transform: scale(1.1);
    }

    .login-link {
        text-align: center;
        color: #FFFFFF;
        font-weight: 500;
    }

    .login-link a {
        color: #FFFFFF;
        text-decoration: none;
        font-weight: 600;
    }

    .login-link a:hover {
        text-decoration: underline;
    }

    /* Validation messages */
    .validation-message {
        color: #fee2e2;
        font-size: 0.875rem;
        margin-top: 5px;
        margin-left: 20px;
        font-weight: 600;
    }

    /* Responsive design */
    @@media (max-width: 768px) {
        .register-container {
            width: 90%;
            margin-left: auto;
            margin-right: auto;
        }

        .register-content {
            flex-direction: column;
            max-width: 500px;
        }

        .form-section {
            padding: 40px 30px;
        }

        .form-header h2 {
            margin-left: 0;
        }
    }
</style>

@code {
    private RegistrationModel registrationModel = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;

    private async Task HandleRegistration()
    {
        errorMessage = "";
        successMessage = "";
        isLoading = true;

        try
        {
            Console.WriteLine("Starting registration...");
            var response = await Http.PostAsJsonAsync("https://exe-backend-j428.onrender.com/api/account/register", registrationModel);

            Console.WriteLine($"Response status: {response.StatusCode}");
            var responseContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Response content: {responseContent}");

            if (response.IsSuccessStatusCode)
            {
                successMessage = "Đăng ký thành công! Đang chuyển sang trang đăng nhập...";
                StateHasChanged();

                // Hiển thị alert cho người dùng
                await JSRuntime.InvokeVoidAsync("alert", "✅ Đăng ký thành công! Bạn sẽ được chuyển sang trang đăng nhập.");

                // Chuyển sang trang login
                Navigation.NavigateTo("/login");
            }
            else
            {
                // Xử lý các lỗi phổ biến
                if (responseContent.Contains("Email") && responseContent.Contains("exists"))
                {
                    errorMessage = "Email này đã được đăng ký!";
                }
                else if (responseContent.Contains("Phone") && responseContent.Contains("exists"))
                {
                    errorMessage = "Số điện thoại này đã được đăng ký!";
                }
                else if (responseContent.Contains("already"))
                {
                    errorMessage = "Tài khoản đã tồn tại!";
                }
                else
                {
                    errorMessage = "Đăng ký không thành công. Vui lòng thử lại!";
                }

                StateHasChanged();
                await JSRuntime.InvokeVoidAsync("alert", "❌ " + errorMessage);
                Console.WriteLine("Error: " + responseContent);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Có lỗi xảy ra. Vui lòng kiểm tra kết nối mạng!";
            StateHasChanged();
            await JSRuntime.InvokeVoidAsync("alert", "❌ " + errorMessage);
            Console.WriteLine("Exception: " + ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoginWithGoogleAsync()
    {
        try
        {
            var result = await Http.GetAsync("/authorize");
            if (result.IsSuccessStatusCode)
            {
                string url = await result.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("open", url, "_blank");
            }
            else
            {
                errorMessage = "Đăng nhập Google thất bại!";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi đăng nhập Google: {ex.Message}";
        }
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "Họ và tên là bắt buộc")]
        public string FullName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Số điện thoại là bắt buộc")]
        [Phone(ErrorMessage = "Số điện thoại không hợp lệ")]
        public string Phone { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email là bắt buộc")]
        [EmailAddress(ErrorMessage = "Email không hợp lệ")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Mật khẩu là bắt buộc")]
        [StringLength(100, ErrorMessage = "Mật khẩu phải có ít nhất {2} ký tự", MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;
    }
}