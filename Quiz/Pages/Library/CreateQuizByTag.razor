@page "/quiz-tag"
@using System.Collections
@using System.Text.Json;
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
<Quiz.Shared.Header />
<div class="quiz-creator-container">
    <div class="container">



        <!-- Main Content Area -->
        <div class="content-wrapper">

            @if (currentStep == 1)
            {
                <h1 class="page-title">Thư viện bài học</h1>

                <div class="tabs">
           <button class="tab " @onclick="() => NavigateToTab(2)">Ôn tập</button>
        <button class="tab active">Tạo Quiz</button>
    
    </div>

                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">Tiêu đề</label>
                        <input type="text" class="form-input" @bind="quizData.Title" placeholder="Nhập tiêu đề...">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Số câu</label>
                        <input type="number" class="form-input" @bind="quizData.QuestionCount" placeholder="10" min="1"
                            max="100">
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">Mô tả</label>
                    <textarea class="form-input form-textarea" @bind="quizData.Description"
                        placeholder="Nhập mô tả..."></textarea>
                </div>

                <div class="question-type">
                    <label class="form-label">Dạng câu hỏi</label>
                    <div class="radio-group">
                        <div class="radio-option">
                            <input type="radio" id="quiz" name="questionType" value="quiz"
                                @onchange="() => quizData.QuestionType = QuestionType.Quiz"
                                checked="@(quizData.QuestionType == QuestionType.Quiz)">
                            <label for="quiz">Trắc nghiệm</label>
                        </div>
                        <div class="radio-option">
                            <input type="radio" id="flashcard" name="questionType" value="flashcard"
                                @onchange="() => quizData.QuestionType = QuestionType.Flashcard"
                                checked="@(quizData.QuestionType == QuestionType.Flashcard)">
                            <label for="flashcard">Flashcard</label>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label class="form-label">Tags</label>
                    @if (tags == null)
                    {
                        <p>Đang tải tags...</p>
                    }
                    else if (!tags.Any())
                    {
                        <p>Không có tag nào.</p>
                    }
                    else
                    {
                        <div class="radio-option">
                            @foreach (var tag in tags)
                            {
                               
                                    <input type="radio" value="@tag" @onchange="e => ToggleTag(e, tag)"
                                        checked="@selectedTags.Contains(tag)"  />
                                         <label class="radio">
                                    @tag
                                </label>
                            }
                        </div>
                    }
                </div>


                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">❌ @errorMessage</div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="success-message">✓ @successMessage</div>
                }

                <button class="btn-submit" @onclick="CreateQuiz" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="loading"></span>
                    }
                    Tạo và ôn tập
                </button>
            }
            else if (currentStep == 2)
            {
                if(quizData.QuestionType == QuestionType.Quiz)
                {
                    <div class="step-container fade-in">
                        <h2 class="step-title">Xem lại tất cả câu hỏi</h2>

                        <div class="review-section">
                            <div class="quiz-info-review">
                                <p><strong>Tiêu đề:</strong> @quizTitle</p>
                                <p><strong>Tổng câu hỏi:</strong> @questions.Count câu</p>
                                <p>
                                    <strong>Loại:</strong> @(answerType == "single" ? "Chọn một đáp án" : "Chọn nhiều đáp án")
                                </p>
                            </div>

                            <div class="questions-list">
                                @foreach (var (question, index) in questions.Select((q, i) => (q, i)))
                                {
                                    <div class="question-review-item">
                                        <div class="question-review-header">
                                            <span class="question-review-number">Câu @(index + 1)</span>
                                            <div class="question-review-actions">
                                                <button class="btn-edit" @onclick="() => EditQuestion(index)">Sửa</button>
                                                <button class="btn-delete-review"
                                                        @onclick="() => DeleteQuestionFromReview(index)">
                                                    Xóa
                                                </button>
                                            </div>
                                        </div>
                                        <div class="question-review-content">
                                            <p><strong>Câu hỏi:</strong> @question.Text</p>
                                            <div class="answers-review">
                                                @foreach (var (answer, ansIndex) in question.Answers.Select((a, i) => (a, i)))
                                                {
                                                    <div class="answer-review @(answer.IsCorrect ? "correct" : "")">
                                                        <span class="answer-label">@GetAnswerLabel(ansIndex)</span>
                                                        <span class="answer-text">@answer.Text</span>
                                                        @if (answer.IsCorrect)
                                                        {
                                                            <span class="correct-badge">Đúng</span>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="button-group">
                                <button class="btn-back" @onclick="PreviousStep">← Quay lại sửa</button>
                                <button class="btn-confirm-quiz" @onclick="SaveAndCreate">Xác nhận tạo Quiz</button>
                            </div>
                        </div>
                    </div>
                }
                else if (quizData.QuestionType == QuestionType.Flashcard)
                {
                    <div class="step-container fade-in">
                        <h2 class="step-title">Xem lại tất cả thẻ học</h2>

                        <div class="review-section">
                            <div class="quiz-info-review">
                                <p><strong>Tiêu đề:</strong> @quizTitle</p>
                                <p><strong>Tổng số thẻ:</strong> @flashcards.Count thẻ</p>
                            </div>

                            <div class="flashcards-list">
                                @foreach (var (card, index) in flashcards.Select((f, i) => (f, i)))
                                {
                                    <div class="flashcard-review-item">
                                        <div class="flashcard-review-header">
                                            <span class="flashcard-number">Thẻ @(index + 1)</span>
                                            <div class="flashcard-review-actions">
                                                <button class="btn-edit" @onclick="() => EditCard(index)">Sửa</button>
                                                <button class="btn-delete-review" @onclick="() => DeleteCard(index)">Xóa</button>
                                            </div>
                                        </div>

                                        <div class="flashcard-review-content">
                                            <p><strong>Thuật ngữ:</strong> @card.Terminology</p>
                                            <p><strong>Định nghĩa:</strong> @card.Definition</p>
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="button-group">
                                <button class="btn-back" @onclick="PreviousStep">← Quay lại sửa</button>
                                <button class="btn-confirm-quiz" @onclick="SaveAndCreate">Xác nhận tạo Flashcard</button>
                            </div>
                        </div>
                    </div>
                }
               
            }
        </div>
    </div>
</div>
<Quiz.Shared.Footer />
@code {
    private QuizData quizData = new();
    private List<string>? tags;
    private HashSet<string> selectedTags = new HashSet<string>();
    private List<FlashcardItem> flashcards = new();
    private string message = "";
    private bool isLoading = false;
    private void EditCard(int index)
    {
        currentStep = 2;
        //   currentCardIndex = index;
    }
    public class FlashcardItem
    {
        public string Terminology { get; set; }
        public string Definition { get; set; }
    }
    private void DeleteCard(int index)
    {
        if (flashcards.Count > 1)
        {
            flashcards.RemoveAt(index);
            successMessage = "Đã xóa thẻ thành công!";
            StateHasChanged();

            // Clear message after 3 seconds
            Task.Delay(3000).ContinueWith(_ =>
            {
                successMessage = "";
                InvokeAsync(StateHasChanged);
            });
        }
        else
        {
            errorMessage = "Phải có ít nhất 1 thẻ!";
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Gọi API khi component load
            Console.WriteLine("OnInitializedAsync called");
            await LoadTags();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading tags: {ex.Message}");
            errorMessage = "Không thể tải danh sách tags";
        }
    }
    public class UserRequest
    {
        public int userId { get; set; }
    }
    private async Task LoadTags()
    {
        // 🔹 Lấy token từ localStorage
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            errorMessage = "⚠️ Không tìm thấy token. Hãy đăng nhập lại!";
            return;
        }

        token = token.Trim();

        // 🔹 Decode JWT để lấy userId
        int userId = 0;
        try
        {
            var parts = token.Split('.');
            if (parts.Length == 3)
            {
                var payload = parts[1];
                payload = payload.PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');
                var jsonBytes = Convert.FromBase64String(payload);
                var json = System.Text.Encoding.UTF8.GetString(jsonBytes);
                var doc = System.Text.Json.JsonDocument.Parse(json);

                if (doc.RootElement.TryGetProperty("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", out var userIdProp))
                {
                    int.TryParse(userIdProp.GetString(), out userId);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "JWT parse failed", ex.Message);
        }

        if (userId == 0)
        {
            errorMessage = "⚠️ Không tìm thấy userId hợp lệ trong token!";
            return;
        }

        // 🔹 Gắn token vào HttpClient (Bearer)
        var backendClient = HttpClientFactory.CreateClient("FastApiClient");
        backendClient.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        try
        {
            var user = new UserRequest { userId = userId };
            var client = HttpClientFactory.CreateClient("FastApiClient");
            var response = await client.PostAsJsonAsync("/data-create-question-api/create-tag-knowledge", user);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                if (result?.success == true)
                {
                    tags = result.data;
                    StateHasChanged(); // Force UI update
                }
                else
                {
                    errorMessage = "Không thể tải tags: " + (result?.message ?? "Unknown error");
                }
            }
            else
            {
                errorMessage = $"API error: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"LoadTags error: {ex}");
            errorMessage = "Lỗi khi tải tags";
            tags = new List<string>(); // Initialize empty list on error
        }
    }

    private void ToggleTag(ChangeEventArgs e, string tag)
    {
        selectedTags.Clear();
        selectedTags.Add(tag);
    }
    public class ApiResponse
    {
        public bool success { get; set; }
        public List<string> data { get; set; } = new();
        public int count { get; set; }
        public string message { get; set; } = "";
        public int userId { get; set; }
    }

    private bool isProcessing = false;

    private string errorMessage = "";
    private string successMessage = "";
    private string textContent = "";

    private const long MaxFileSize = 10 * 1024 * 1024; // 10MB
    private JsonElement.ArrayEnumerator? generatedQuestions;
    private string? knowledgeContent;




    public enum QuestionType
    {
        Quiz,
        Flashcard
    }



    public class QuizData
    {
        public string Title { get; set; } = "";
        public int QuestionCount { get; set; } = 10;
        public string Description { get; set; } = "";
        public QuestionType QuestionType { get; set; } = QuestionType.Quiz;

    }



    private async Task CreateQuiz()
    {
        errorMessage = "";
        successMessage = "";

        // 🔹 Kiểm tra tiêu đề
        if (string.IsNullOrWhiteSpace(quizData.Title))
        {
            errorMessage = "Vui lòng nhập tiêu đề!";
            return;
        }

        // 🔹 Lấy token từ localStorage
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
        if (string.IsNullOrWhiteSpace(token))
        {
            errorMessage = "⚠️ Không tìm thấy token. Hãy đăng nhập lại!";
            return;
        }
        token = token.Trim();

        // 🔹 Giải mã JWT lấy userId
        int userId = 0;
        try
        {
            var parts = token.Split('.');
            if (parts.Length == 3)
            {
                var payload = parts[1];
                payload = payload.PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');
                var jsonBytes = Convert.FromBase64String(payload);
                var json = System.Text.Encoding.UTF8.GetString(jsonBytes);
                var doc = JsonDocument.Parse(json);

                if (doc.RootElement.TryGetProperty("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", out var userIdProp))
                {
                    int.TryParse(userIdProp.GetString(), out userId);
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.error", "JWT parse failed", ex.Message);
        }

        if (userId == 0)
        {
            errorMessage = "⚠️ Không tìm thấy userId hợp lệ trong token!";
            return;
        }

        // 🔹 Tạo HttpClient kèm Bearer token
        var client = HttpClientFactory.CreateClient("FastApiClient");
        client.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

        isProcessing = true;

        try
        {
            var generateRequest = new
            {
                typeQuestion = quizData.QuestionType == QuestionType.Quiz ? "1 answer" : "flashcard",
                tag = selectedTags.FirstOrDefault() ?? "",
                userId = userId,
                count = quizData.QuestionCount
            };

            var response = await client.PostAsJsonAsync("/data-create-question-api/create-quiz-with-tag", generateRequest);

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = "Không thể tạo câu hỏi từ AI.";
                return;
            }

            var json = await response.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("console.log", "API Response:", json);

            using var doc = JsonDocument.Parse(json);
            var dataElement = doc.RootElement.GetProperty("data");

            // 🧩 Phân biệt Quiz và Flashcard
            if (quizData.QuestionType == QuestionType.Quiz)
            {
                questions = new List<Question>();

                foreach (var item in dataElement.EnumerateArray())
                {
                    string questionText = "";
                    if (item.TryGetProperty("question", out var qProp))
                        questionText = qProp.GetString() ?? "";

                    // Deserialize answers
                    Dictionary<string, string>? answersDict = null;
                    if (item.TryGetProperty("answers", out var aProp))
                    {
                        try
                        {
                            answersDict = JsonSerializer.Deserialize<Dictionary<string, string>>(aProp.ToString());
                        }
                        catch
                        {
                            answersDict = new Dictionary<string, string>();
                        }
                    }

                    var correctKeys = new List<string>();
                    if (item.TryGetProperty("correctAnswers", out var cProp))
                    {
                        correctKeys = cProp.EnumerateArray()
                                          .Select(x => x.GetString() ?? "")
                                          .ToList();
                    }

                    var answersList = answersDict?.OrderBy(kv => kv.Key)
                                                  .Select(kv => new Answer
                                                  {
                                                      Text = kv.Value ?? "",
                                                      IsCorrect = correctKeys.Contains(kv.Key)
                                                  })
                                                  .ToList() ?? new List<Answer>();

                    questions.Add(new Question
                    {
                        Text = questionText,
                        Answers = answersList,
                        CorrectAnswers = correctKeys
                    });
                }

                successMessage = "✅ Đã tạo câu hỏi trắc nghiệm thành công!";
            }
            else // 🔹 Flashcard mode
            {
                flashcards = new List<FlashcardItem>();

                foreach (var item in dataElement.EnumerateArray())
                {
                    string term = "";
                    string def = "";

                    // Tìm key hợp lệ cho thuật ngữ
                    if (item.TryGetProperty("terminology", out var t))
                        term = t.GetString() ?? "";
                    else if (item.TryGetProperty("term", out var t2))
                        term = t2.GetString() ?? "";
                    else if (item.TryGetProperty("question", out var t3))
                        term = t3.GetString() ?? "";

                    // Tìm key hợp lệ cho định nghĩa
                    if (item.TryGetProperty("definition", out var d))
                        def = d.GetString() ?? "";
                    else if (item.TryGetProperty("answer", out var d2))
                        def = d2.GetString() ?? "";

                    if (!string.IsNullOrEmpty(term) || !string.IsNullOrEmpty(def))
                    {
                        flashcards.Add(new FlashcardItem
                        {
                            Terminology = term,
                            Definition = def
                        });
                    }
                }

                successMessage = $"✅ Đã tạo {flashcards.Count} Flashcard thành công!";
            }

            currentStep = 2;
        }
        catch (Exception ex)
        {
            errorMessage = $"❌ Lỗi: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }


    public async Task SaveAndCreate()
    {
        errorMessage = "";
        successMessage = "";
        isProcessing = true;

        try
        {
            await JS.InvokeVoidAsync("console.log", "SaveAndCreate started", new { quizType = quizData.QuestionType.ToString() });

            // ✅ Kiểm tra dữ liệu
            if (quizData.QuestionType == QuestionType.Quiz && (questions == null || !questions.Any()))
            {
                errorMessage = "⚠️ Chưa có câu hỏi nào được tạo.";
                return;
            }

            if (quizData.QuestionType == QuestionType.Flashcard && (flashcards == null || !flashcards.Any()))
            {
                errorMessage = "⚠️ Chưa có thẻ học nào được tạo.";
                return;
            }

            // ✅ Lấy token từ localStorage
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrWhiteSpace(token))
            {
                errorMessage = "⚠️ Không tìm thấy token. Hãy đăng nhập lại!";
                return;
            }

            // ✅ Giải mã token để lấy userId
            int userId = 0;
            try
            {
                var parts = token.Split('.');
                if (parts.Length == 3)
                {
                    var payload = parts[1];
                    payload = payload.PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');
                    var jsonBytes = Convert.FromBase64String(payload);
                    var json = System.Text.Encoding.UTF8.GetString(jsonBytes);
                    var doc = JsonDocument.Parse(json);

                    if (doc.RootElement.TryGetProperty("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", out var userIdProp))
                    {
                        int.TryParse(userIdProp.GetString(), out userId);
                    }
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", "JWT parse failed", ex.Message);
            }

            if (userId == 0)
            {
                errorMessage = "⚠️ Không tìm thấy userId hợp lệ trong token!";
                return;
            }

            // ✅ Khởi tạo HttpClient
            var backendClient = HttpClientFactory.CreateClient("FastApiClient");
            backendClient.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // ✅ Gửi yêu cầu tạo SetQuiz (tập câu hỏi / thẻ học)
            var setQuizPayload = new
            {
                Title = quizData.Title,
                Description = quizData.Description,
                Type = quizData.QuestionType == QuestionType.Quiz ? "multiple" : "flashcard"
            };

            var setQuizResponse = await backendClient.PostAsJsonAsync("https://exe-backend-j428.onrender.com/api/SetQuiz/create", setQuizPayload);
            if (!setQuizResponse.IsSuccessStatusCode)
            {
                var error = await setQuizResponse.Content.ReadAsStringAsync();
                errorMessage = $"❌ Lỗi khi tạo SetQuiz: {error}";
                return;
            }

            var setQuizResult = await setQuizResponse.Content.ReadFromJsonAsync<SetQuizResponse>();
            if (setQuizResult == null || setQuizResult.SetQuizId <= 0)
            {
                errorMessage = "❌ Không thể lấy ID của SetQuiz vừa tạo!";
                return;
            }

            int setQuizId = setQuizResult.SetQuizId;
            await JS.InvokeVoidAsync("console.log", "SetQuiz created", new { setQuizId });

            // ✅ Nếu là QUIZ
            if (quizData.QuestionType == QuestionType.Quiz)
            {
                int idx = 0;
                foreach (var question in questions)
                {
                    idx++;

                    // Chuyển danh sách đáp án thành object
                    var answers = new Dictionary<string, string>();
                    for (int i = 0; i < question.Answers.Count; i++)
                    {
                        answers.Add($"additionalProp{i + 1}", question.Answers[i].Text);
                    }

                    var correctAnswers = question.Answers
                        .Where(a => a.IsCorrect)
                        .Select(a => a.Text)
                        .ToList();

                    var payload = new
                    {
                        setQuizId = setQuizId,
                        question = question.Text,
                        answers = answers,
                        correctAnswers = correctAnswers
                    };

                    var saveResponse = await backendClient.PostAsJsonAsync("/question-api/questions", payload);
                    if (!saveResponse.IsSuccessStatusCode)
                    {
                        var respBody = await saveResponse.Content.ReadAsStringAsync();
                        errorMessage = $"❌ Lỗi khi lưu câu hỏi #{idx}: {respBody}";
                        return;
                    }
                }

                successMessage = "✅ Đã lưu thành công toàn bộ câu hỏi Quiz!";
            }

            // ✅ Nếu là FLASHCARD
            else if (quizData.QuestionType == QuestionType.Flashcard)
            {
                int idx = 0;
                foreach (var card in flashcards)
                {
                    idx++;

                    var answers = new Dictionary<string, string>
        {
            { "additionalProp1", card.Terminology }
        };

                    var correctAnswers = new List<string> { card.Terminology };

                    var payload = new
                    {
                        setQuizId = setQuizId,
                        question = card.Definition,
                        answers = answers,
                        correctAnswers = correctAnswers
                    };

                    var saveResponse = await backendClient.PostAsJsonAsync("/question-api/questions", payload);
                    if (!saveResponse.IsSuccessStatusCode)
                    {
                        var respBody = await saveResponse.Content.ReadAsStringAsync();
                        errorMessage = $"❌ Lỗi khi lưu flashcard #{idx}: {respBody}";
                        return;
                    }
                }

                successMessage = "✅ Đã lưu thành công toàn bộ thẻ học!";
            }

            // ✅ Thành công -> chuyển trang
            await JS.InvokeVoidAsync("console.log", "SaveAndCreate success");
            Navigation.NavigateTo("/revision");
        }
        catch (Exception ex)
        {
            errorMessage = $"⚠️ Lỗi khi lưu: {ex.Message}";
            Console.WriteLine($"SaveAndCreate exception: {ex}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
    public class SetQuizResponse
    {
        public int SetQuizId { get; set; }
    }

    public class SetQuizRequest
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public string Type { get; set; } = "";  
    }

    public class GenerateQuestionsResponse
    {
        public List<object> Questions { get; set; } = new();
        public string Message { get; set; } = "";
    }

    public class SaveKnowledgeResponse
    {
        public int Id { get; set; }
        public string Message { get; set; } = "";
    }

    public class QuizQuestion
    {
        public string Question { get; set; } = "";
        public Dictionary<string, string> Answers { get; set; } = new();
        public List<string> CorrectAnswers { get; set; } = new();
        public string? SelectedAnswer { get; set; } // để lưu lựa chọn người dùng
    }
    public class CreateQuizResponse
    {
        public int Id { get; set; }
        public string Message { get; set; } = "";
    }

    //private List<Question> questions = new List<Question>();

    public class QuestionCreateRequest
    {
        public int SetQuizId { get; set; }
        public string Question { get; set; } = string.Empty;
        public Dictionary<string, string> Answers { get; set; } = new();
        public List<string> CorrectAnswers { get; set; } = new();
    }



    private async Task OpenFileDialog()
    {
        await JS.InvokeVoidAsync("fileHelper.openFileDialog", "fileInput");
    }



    private int currentStep = 1;
    private string creationMethod = "";
    private string answerType = "single";
    private int currentQuestionIndex = 0;

    // Quiz form data
    private string quizTitle = "";
    private int quizTime = 30;
    private string quizDescription = "";

    private List<Question> questions = new List<Question>();


    protected override void OnInitialized()
    {
        // Initialize empty - user will add questions manually
    }

    private void NavigateToTab(int tab)
    {
        switch (tab)
        {
            case 0:
                Navigation.NavigateTo("/library");
                break;

            case 2:
                Navigation.NavigateTo("/revision");
                break;
            default:
                Navigation.NavigateTo("/");
                break;
        }

    }
    public class QuestionModel
    {
        public string Question { get; set; } = string.Empty;
        public Dictionary<string, string> Answers { get; set; } = new();
        public List<string> CorrectAnswers { get; set; } = new();
    }
    private void SelectCreationMethod(string method)
    {
        creationMethod = method;
    }

    private void NextStep()
    {
        if (currentStep == 1)
        {
            currentStep = 2;
            // Tạo 1 câu hỏi đầu tiên
            if (questions.Count == 0)
            {
                AddNewQuestion();
            }
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
        }
    }

    private void NextQuestion()
    {
        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
        }
    }

    private void PreviousQuestion()
    {
        if (currentQuestionIndex > 0)
        {
            currentQuestionIndex--;
        }
    }

    private void AddNewQuestion()
    {
        questions.Add(new Question
        {
            Text = "",
            Answers = new List<Answer>
{
new Answer { Text = "", IsCorrect = true },
new Answer { Text = "", IsCorrect = false },
new Answer { Text = "", IsCorrect = false },
new Answer { Text = "", IsCorrect = false }
}
        });
        // Di chuyển tới câu hỏi mới vừa tạo
        currentQuestionIndex = questions.Count - 1;
    }

    private void RemoveQuestion(int index)
    {
        if (questions.Count > 1)
        {
            questions.RemoveAt(index);
            // Điều chỉnh index nếu cần
            if (currentQuestionIndex >= questions.Count)
            {
                currentQuestionIndex = questions.Count - 1;
            }
        }
    }

    private void DeleteQuestionFromReview(int index)
    {
        if (questions.Count > 1)
        {
            questions.RemoveAt(index);
        }
    }

    private void SetCorrectAnswer(int questionIndex, int answerIndex)
    {
        foreach (var answer in questions[questionIndex].Answers)
        {
            answer.IsCorrect = false;
        }
        questions[questionIndex].Answers[answerIndex].IsCorrect = true;
    }

    private string GetAnswerLabel(int index)
    {
        return ((char)('A' + index)).ToString();
    }

    private void CreateQuiz1()
    {
        if (string.IsNullOrWhiteSpace(quizTitle))
        {
            JS.InvokeVoidAsync("alert", "Vui lòng nhập tiêu đề!");
            return;
        }

        if (questions.Count == 0)
        {
            JS.InvokeVoidAsync("alert", "Vui lòng thêm ít nhất 1 câu hỏi!");
            return;
        }

        if (questions.Any(q => string.IsNullOrWhiteSpace(q.Text)))
        {
            JS.InvokeVoidAsync("alert", "Vui lòng nhập đầy đủ câu hỏi!");
            return;
        }

        // Chuyển sang bước 3 (Review)
        currentStep = 3;
    }

    private void EditQuestion(int index)
    {
        // Quay lại bước 2 để sửa câu hỏi
        currentStep = 2;
        currentQuestionIndex = index;
    }


    private void ResetForm()
    {
        currentStep = 1;
        creationMethod = "";
        quizTitle = "";
        quizDescription = "";
        questions.Clear();
        currentQuestionIndex = 0;
        answerType = "single";
        quizTime = 30;
    }

    public class Question
    {
        public string Text { get; set; }
        public string Quesion { get; set; }
        public List<Answer> Answers { get; set; }
        public List<string> CorrectAnswers { get; set; }
    }

    public class Answer
    {
        public string Text { get; set; }
        public bool IsCorrect { get; set; }
    }
}

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;500;600;700;800&display=swap');

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .quiz-creator-container {
        font-family: 'Baloo 2', cursive;
        min-height: 100vh;
        background: #ffffff;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .page-title {
        font-size: 36px;
        font-weight: 800;
        color: #1D059D;
        margin: 40px 0 30px;
    }

    /* Tabs */
    .tabs {
        display: flex;
        gap: 5px;
        border-bottom: 2px solid #e8e8e8;
        margin-bottom: 40px;
    }

    .tab {
        background: transparent;
        border: none;
        padding: 15px 25px;
        font-size: 24px;
        font-weight: 600;
        color: #718096;
        cursor: pointer;
        position: relative;
        font-family: 'Baloo 2', cursive;
    }

    .tab.active {
        color: #4318FF;
    }

    .tab.active::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        right: 0;
        height: 3px;
        background: #4318FF;
    }

    .content-wrapper {
        min-height: 500px;
        margin-bottom: 60px;
    }

    .step-container {
        max-width: 900px;
        margin: 0 auto;
    }

    .step-title {
        font-size: 28px;
        font-weight: 700;
        color: #2D3748;
        text-align: center;
        margin-bottom: 40px;
    }

    /* Creation Options */
    .creation-options {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin-bottom: 40px;
    }

    .option-button {
        background: #1D059D;
        border: 3px solid transparent;
        padding: 50px 30px;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s;
        text-align: center;
        font-family: 'Baloo 2', cursive;
        color: white;
    }

    .option-button:hover {
        transform: translateY(-8px);
        box-shadow: 0 12px 35px rgba(67, 24, 255, 0.2);
        border-color: #4318FF;
    }

    .option-button.selected {
        border-color: #D5CEFD;
        background: #D5CEFD;
        box-shadow: 0 12px 35px rgba(67, 24, 255, 0.4);
    }

    .option-button.selected h3,
    .option-button.selected p {
        color: black;
    }

    .option-button h3 {
        font-size: 24px;
        font-weight: 700;
        margin-bottom: 10px;
    }

    .option-button p {
        font-size: 16px;
    }

    /* Quiz Form */
    .quiz-form {
        border-radius: 20px;
        margin-bottom: 30px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group.half {
        grid-column: 2;
    }

    .form-group label {
        display: block;
        font-weight: 700;
        color: #2D3748;
        margin-bottom: 10px;
        font-size: 16px;
        margin-top: 10px;
    }

    .counter-display {
        background: #D5CEFD;
        padding: 12px 16px;
        border-radius: 12px;
        font-size: 16px;
        color: #2D1B69;
        font-weight: 600;
        margin-bottom: 15px;
    }

    .form-input,
    .form-textarea {
        width: 100%;
        padding: 14px 16px;
        border: 2px solid #D5CEFD;
        border-radius: 12px;
        font-size: 16px;
        font-family: 'Baloo 2', cursive;
        background: white;
        transition: border-color 0.3s;
    }

    .form-input:focus,
    .form-textarea:focus {
        outline: none;
        border-color: #4318FF;
    }

    .form-textarea {
        resize: vertical;
    }

    /* Radio Group */
    .radio-group {
        display: flex;
        gap: 30px;
    }

    .radio-label {
        display: flex;
        align-items: center;
        gap: 10px;
        font-weight: 600;
        color: #4318FF;
        cursor: pointer;
        font-size: 16px;
        margin: 0;
    }

    .radio-label input[type="radio"] {
        width: 20px;
        height: 20px;
        cursor: pointer;
    }

    .questions-section {
        margin-top: 30px;
    }

    .question-navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        background: #D5CEFD;
        padding: 15px 20px;
        border-radius: 12px;
    }

    .question-counter {
        font-weight: 700;
        color: #2D1B69;
        font-size: 18px;
    }

    .btn-nav {
        background: #4318FF;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
    }

    .btn-nav:hover:not(:disabled) {
        background: #2D1B69;
        transform: translateY(-2px);
    }

    .btn-nav:disabled {
        opacity: 0.4;
        cursor: not-allowed;
    }

    .question-card {
        background: #D5CEFD;
        padding: 25px;
        border-radius: 16px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .question-number {
        background: #2D1B69;
        color: white;
        width: 35px;
        height: 35px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 16px;
    }

    .btn-remove {
        background: transparent;
        border: none;
        font-size: 22px;
        cursor: pointer;
        opacity: 0.6;
        transition: opacity 0.2s;
    }

    .btn-remove:hover {
        opacity: 1;
    }

    .answer-item {
        display: flex;
        gap: 12px;
        align-items: center;
        margin-bottom: 12px;
    }

    .answer-item input[type="text"] {
        flex: 1;
    }

    .answer-item input[type="radio"],
    .answer-item input[type="checkbox"] {
        width: 22px;
        height: 22px;
        cursor: pointer;
    }

    .btn-add-question {
        background: #4318FF;
        color: white;
        border: none;
        padding: 14px 30px;
        border-radius: 12px;
        font-size: 16px;
        font-weight: 700;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        margin: 20px auto;
        transition: all 0.3s;
        display: block;
    }

    .btn-add-question:hover {
        background: #2D1B69;
        transform: translateY(-2px);
    }

    /* Buttons */
    .button-group {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 40px;
    }

    .btn-next,
    .btn-back,
    .btn-create-quiz {
        padding: 16px 40px;
        border: none;
        border-radius: 12px;
        font-size: 18px;
        font-weight: 700;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
    }

    .btn-next {
        background: #D5CEFD;
        color: black;
        margin-left: 340px;
    }

    .btn-next:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        background: #4318FF;
        color: white;
    }

    .btn-next:not(:disabled):hover {
        background: #4318FF;
        color: white;
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(67, 24, 255, 0.4);
    }

    .btn-back {
        background: #E2E8F0;
        color: #2D3748;
    }

    .btn-back:hover {
        background: #CBD5E0;
    }

    .btn-create-quiz {
        background: #1D059D;
        color: white;
        width: 100%;
        margin-top: 20px;
    }

    .btn-create-quiz:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .btn-create-quiz:not(:disabled):hover {
        background: #1f1347;
        transform: translateY(-3px);
    }

    /* Review Section */
    .review-section {
        background: white;
        padding: 30px;
        border-radius: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .quiz-info-review {
        background: #D5CEFD;
        padding: 20px;
        border-radius: 12px;
        margin-bottom: 30px;
    }

    .quiz-info-review p {
        margin: 10px 0;
        font-size: 16px;
        color: #2D3748;
    }

    .quiz-info-review strong {
        color: #2D1B69;
    }

    .questions-list {
        margin-bottom: 30px;
    }

    .question-review-item {
        background: #F8F9FA;
        border: 2px solid #D5CEFD;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .question-review-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 15px;
        border-bottom: 2px solid #D5CEFD;
    }

    .question-review-number {
        background: #2D1B69;
        color: white;
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: 700;
        font-size: 14px;
    }

    .question-review-actions {
        display: flex;
        gap: 10px;
    }

    .btn-edit {
        background: #1D059D;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
        font-size: 14px;
    }

    .btn-edit:hover {
        background: #2D1B69;
        transform: translateY(-2px);
    }

    .btn-delete-review {
        background: #FF6B6B;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
        font-size: 14px;
    }

    .btn-delete-review:hover {
        background: #FA5252;
        transform: translateY(-2px);
    }

    .question-review-content {
        padding: 15px;
    }

    .question-review-content p {
        margin-bottom: 15px;
        font-size: 16px;
        color: #2D3748;
    }

    .answers-review {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .answer-review {
        background: white;
        border: 2px solid #D5CEFD;
        border-radius: 8px;
        padding: 12px 15px;
        display: flex;
        align-items: center;
        gap: 12px;
        transition: all 0.3s;
    }

    .answer-review.correct {
        background: #E6FFE6;
        border-color: #70E539;
    }

    .answer-label {
        background: #1D059D;
        color: white;
        width: 35px;
        height: 35px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 14px;
        flex-shrink: 0;
    }

    .answer-text {
        flex: 1;
        color: #2D3748;
        font-size: 15px;
    }

    .correct-badge {
        background: #70E539;
        color: white;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 700;
        flex-shrink: 0;
    }

    .btn-confirm-quiz {
        background: #1D059D;
        color: white;
        border: none;
        padding: 16px 40px;
        border-radius: 12px;
        font-size: 18px;
        font-weight: 700;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
    }

    .btn-confirm-quiz:hover {
        background: #70E539;
        transform: translateY(-3px);
        box-shadow: 0 8px 25px;
    }

    /* Animation */
    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .creation-options {
            grid-template-columns: 1fr;
        }

        .form-row {
            grid-template-columns: 1fr;
        }

        .btn-next {
            margin-left: 0;
        }

        .question-navigation {
            flex-direction: column;
            gap: 10px;
        }

        .question-review-actions {
            flex-direction: column;
            width: 100%;
        }

        .btn-edit,
        .btn-delete-review {
            width: 100%;
        }
    }

    .form-grid {
        display: grid;
        grid-template-columns: 1fr 200px;
        gap: 30px;
        margin-bottom: 30px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .form-label {
        font-size: 16px;
        font-weight: 700;
        color: #1f2937;
    }

    .form-input {
        background: #ddd6fe;
        border: none;
        border-radius: 12px;
        padding: 15px 20px;
        font-family: 'Baloo 2', cursive;
        font-size: 16px;
        color: #1f2937;
        outline: none;
    }

    .form-input:focus {
        background: #c4b5fd;
    }

    .form-textarea {
        min-height: 120px;
        resize: vertical;
    }

    .question-type {
        margin-top: 30px;
    }

    .radio-group {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-top: 10px;
    }

    .radio-option {
        display: flex;
        align-items: center;
        gap: 10px;
        cursor: pointer;
    }

    .radio-option input[type="radio"] {
        width: 24px;
        height: 24px;
        accent-color: #5b21b6;
        cursor: pointer;
    }

    .radio-option label {
        font-size: 16px;
        font-weight: 600;
        color: #1f2937;
        cursor: pointer;
    }

    .upload-section {
        background: #ddd6fe;
        border-radius: 16px;
        padding: 40px;
        text-align: center;
        margin-top: 30px;
        position: relative;
        transition: all 0.3s;
    }

    .upload-section.dragover {
        background: #c4b5fd;
        border: 2px dashed #5b21b6;
    }

    .upload-section.disabled {
        background: #e5e7eb;
        opacity: 0.6;
        pointer-events: none;
    }

    .input-mode-selector {
        display: flex;
        gap: 15px;
        margin-bottom: 25px;
        background: #f3f4f6;
        padding: 8px;
        border-radius: 12px;
    }

    .input-mode-btn {
        flex: 1;
        padding: 12px 20px;
        border: none;
        border-radius: 8px;
        font-family: 'Baloo 2', cursive;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        background: transparent;
        color: #6b7280;
    }

    .input-mode-btn.active {
        background: #5b21b6;
        color: white;
    }

    .input-mode-btn:hover:not(.active) {
        background: #e5e7eb;
    }

    .text-input-section {
        margin-top: 30px;
    }

    .text-input-area {
        width: 100%;
        min-height: 300px;
        background: #ddd6fe;
        border: 2px solid #c4b5fd;
        border-radius: 12px;
        padding: 20px;
        font-family: 'Baloo 2', cursive;
        font-size: 16px;
        color: #1f2937;
        outline: none;
        resize: vertical;
    }

    .text-input-area:focus {
        background: #c4b5fd;
        border-color: #5b21b6;
    }

    .word-count {
        text-align: right;
        margin-top: 8px;
        font-size: 14px;
        color: #6b7280;
        font-weight: 600;
    }

    .word-count.warning {
        color: #dc2626;
    }

    .word-count.valid {
        color: #059669;
    }

    .upload-icon {
        width: 80px;
        height: 80px;
        margin: 0 auto 20px;
    }

    .upload-icon svg {
        width: 100%;
        height: 100%;
    }

    .upload-title {
        font-size: 22px;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 10px;
    }

    .upload-subtitle {
        font-size: 14px;
        color: #6b7280;
        margin-bottom: 20px;
    }

    .btn-upload {
        background: #5b21b6;
        color: white;
        padding: 12px 35px;
        border-radius: 8px;
        border: none;
        font-family: 'Baloo 2', cursive;
        font-size: 16px;
        font-weight: 700;
        cursor: pointer;
        transition: background 0.3s;
    }

    .btn-upload:hover {
        background: #4c1d95;
    }

    .file-input {
        display: none;
    }

    .uploaded-file {
        margin-top: 20px;
        padding: 15px;
        background: white;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .file-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .file-icon {
        font-size: 24px;
    }

    .file-details {
        text-align: left;
    }

    .file-name {
        font-weight: 600;
        color: #1f2937;
    }

    .file-size {
        font-size: 12px;
        color: #6b7280;
    }

    .remove-file {
        background: #ef4444;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 8px 15px;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        font-weight: 600;
    }

    .remove-file:hover {
        background: #dc2626;
    }

    .btn-submit {
        background: #5b21b6;
        color: white;
        padding: 15px 50px;
        border-radius: 10px;
        border: none;
        font-family: 'Baloo 2', cursive;
        font-size: 18px;
        font-weight: 700;
        cursor: pointer;
        margin-top: 30px;
        transition: background 0.3s;
    }

    .btn-submit:hover {
        background: #4c1d95;
    }

    .btn-submit:disabled {
        background: #9ca3af;
        cursor: not-allowed;
    }

    .loading {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #ffffff;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spin 1s linear infinite;
        margin-right: 10px;
    }

    @@keyframes spin {
        to {
            transform: rotate(360deg);
        }
    }

    .error-message {
        background: #fee2e2;
        color: #991b1b;
        padding: 15px;
        border-radius: 10px;
        margin-top: 20px;
        font-weight: 600;
    }

    .success-message {
        background: #d1fae5;
        color: #065f46;
        padding: 15px;
        border-radius: 10px;
        margin-top: 20px;
        font-weight: 600;
    }
</style>