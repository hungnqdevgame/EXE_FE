@page "/quiz-ai"
@using System.Collections
@using System.Text.Json;

@using System.Security.Claims;
@inject IJSRuntime JS
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
<Quiz.Shared.Header />
<div class="quiz-creator-container">
    <div class="container">
        

       
        <!-- Main Content Area -->
        <div class="content-wrapper">
            
             @if (currentStep == 1)
            {
                  <h1 class="page-title">Th∆∞ vi·ªán b√†i h·ªçc</h1>
    
    <div class="tabs">
           <button class="tab " @onclick="() => NavigateToTab(2)">√în t·∫≠p</button>
        <button class="tab active">T·∫°o Quiz</button>
    
    </div>

    <div class="form-grid">
        <div class="form-group">
            <label class="form-label">Ti√™u ƒë·ªÅ</label>
            <input type="text" class="form-input" @bind="quizData.Title" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ...">
        </div>
        <div class="form-group">
            <label class="form-label">S·ªë c√¢u</label>
            <input type="number" class="form-input" @bind="quizData.QuestionCount" placeholder="10" min="1" max="100">
        </div>
    </div>

    <div class="form-group">
        <label class="form-label">M√¥ t·∫£</label>
        <textarea class="form-input form-textarea" @bind="quizData.Description" placeholder="Nh·∫≠p m√¥ t·∫£..."></textarea>
    </div>

    <div class="question-type">
        <label class="form-label">D·∫°ng c√¢u h·ªèi</label>
        <div class="radio-group">
            <div class="radio-option">
                <input type="radio" id="quiz" name="questionType" value="quiz" @onchange="() => quizData.QuestionType = QuestionType.Quiz" checked="@(quizData.QuestionType == QuestionType.Quiz)">
                <label for="quiz">Tr·∫Øc nghi·ªám</label>
            </div>
            <div class="radio-option">
                <input type="radio" id="flashcard" name="questionType" value="flashcard" @onchange="() => quizData.QuestionType = QuestionType.Flashcard" checked="@(quizData.QuestionType == QuestionType.Flashcard)">
                <label for="flashcard">Flashcard</label>
            </div>
        </div>
    </div>

    <div class="question-type">
        <label class="form-label">M·ª©c ƒë·ªô c√¢u h·ªèi</label>
        <div class="radio-group">
            <div class="radio-option">
                <input type="radio" id="recognition" name="level" value="Recognition" @onchange="() => quizData.Level = QuestionLevel.Recognition" checked="@(quizData.Level == QuestionLevel.Recognition)">
                <label for="recognition">Recognition - Nh·∫≠n bi·∫øt</label>
            </div>
            <div class="radio-option">
                <input type="radio" id="comprehension" name="level" value="Comprehension" @onchange="() => quizData.Level = QuestionLevel.Comprehension" checked="@(quizData.Level == QuestionLevel.Comprehension)">
                <label for="comprehension">Comprehension - Th√¥ng hi·ªÉu</label>
            </div>
            <div class="radio-option">
                <input type="radio" id="application" name="level" value="Application" @onchange="() => quizData.Level = QuestionLevel.Application" checked="@(quizData.Level == QuestionLevel.Application)">
                <label for="application">Application - V·∫≠n d·ª•ng</label>
            </div>
            <div class="radio-option">
                <input type="radio" id="highapp" name="level" value="High Application" @onchange="() => quizData.Level = QuestionLevel.HighApplication" checked="@(quizData.Level == QuestionLevel.HighApplication)">
                <label for="highapp">High Application - V·∫≠n d·ª•ng cao</label>
            </div>
        </div>
    </div>

    <div class="input-mode-selector">
        <button class="input-mode-btn @(inputMode == InputMode.Upload ? "active" : "")" 
                @onclick="() => SwitchInputMode(InputMode.Upload)">
            üìÅ Upload t√†i li·ªáu
        </button>
        <button class="input-mode-btn @(inputMode == InputMode.Text ? "active" : "")" 
                @onclick="() => SwitchInputMode(InputMode.Text)">
            ‚úçÔ∏è Nh·∫≠p vƒÉn b·∫£n
        </button>
    </div>

    @if (inputMode == InputMode.Upload)
    {
        <div class="upload-section @(isDragging ? "dragover" : "")" 
             @ondrop="HandleDrop" 
             @ondrop:preventDefault 
             @ondragover:preventDefault 
             @ondragenter="HandleDragEnter" 
             @ondragenter:preventDefault
             @ondragleave="HandleDragLeave">
            
            <InputFile id="fileInput" 
                       class="file-input" 
                       accept=".pdf,.docx,.txt" 
                       OnChange="HandleFileSelected" />
            
            <div class="upload-icon">
                <svg viewBox="0 0 100 100" fill="none">
                    <circle cx="50" cy="35" r="20" fill="#5b89e5"/>
                    <circle cx="40" cy="35" r="20" fill="#4a7fd4"/>
                    <circle cx="60" cy="35" r="20" fill="#6ba3f7"/>
                    <rect x="45" y="45" width="10" height="15" fill="#5b89e5"/>
                    <path d="M50 60 L50 75 M40 70 L60 70" stroke="#5b89e5" stroke-width="3" stroke-linecap="round"/>
                    <path d="M45 65 L50 60 L55 65" stroke="#5b89e5" stroke-width="3" stroke-linecap="round" fill="none"/>
                </svg>
            </div>
            <div class="upload-title">Ch·ªçn t√†i li·ªáu</div>
            <div class="upload-subtitle">PDF, DOCX, TXT (K√©o th·∫£ ho·∫∑c click ƒë·ªÉ ch·ªçn)</div>
            <label for="fileInput" class="btn-upload" style="cursor: pointer; display: inline-block;">Ch·ªçn</label>

            @if (uploadedFile != null)
            {
                <div class="uploaded-file">
                    <div class="file-info">
                        <span class="file-icon">@GetFileIcon(uploadedFile.Name)</span>
                        <div class="file-details">
                            <div class="file-name">@uploadedFile.Name</div>
                            <div class="file-size">@FormatFileSize(uploadedFile.Size)</div>
                        </div>
                    </div>
                    <button class="remove-file" @onclick="RemoveFile">X√≥a</button>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-input-section">
            <textarea class="text-input-area" 
                      @bind="textContent" 
                      @bind:event="oninput"
                      placeholder="Nh·∫≠p n·ªôi dung ki·∫øn th·ª©c ·ªü ƒë√¢y... (√çt nh·∫•t 50 t·ª´)">
            </textarea>
            <div class="word-count @(GetWordCountClass())">
                @GetWordCount() t·ª´ @(GetWordCount() != 0 ? "" : "(Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng n·ªôi dung)")
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">‚ùå @errorMessage</div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="success-message">‚úì @successMessage</div>
    }

    <button class="btn-submit" @onclick="CreateQuiz" disabled="@isProcessing">
        @if (isProcessing)
        {
            <span class="loading"></span>
        }
        T·∫°o v√† √¥n t·∫≠p
    </button>
            }
            else if (currentStep == 2)
            {
                <!-- Step 3: Review All Questions -->
                <div class="step-container fade-in">
                    <h2 class="step-title">Xem l·∫°i t·∫•t c·∫£ c√¢u h·ªèi</h2>

                    <div class="review-section">
                        <div class="quiz-info-review">
                            <p><strong>Ti√™u ƒë·ªÅ:</strong> @quizTitle</p>
                            <p><strong>T·ªïng c√¢u h·ªèi:</strong> @questions.Count c√¢u</p>
                          
                        </div>

                        <div class="questions-list">
                            @foreach (var (question, index) in questions.Select((q, i) => (q, i)))
                            {
                                <div class="question-review-item">
                                    <div class="question-review-header">
                                        <span class="question-review-number">C√¢u @(index + 1)</span>
                                        <div class="question-review-actions">
                                            <button class="btn-edit" @onclick="() => EditQuestion(index)">S·ª≠a</button>
                                            <button class="btn-delete-review" @onclick="() => DeleteQuestionFromReview(index)">X√≥a</button>
                                        </div>
                                    </div>
                                    <div class="question-review-content">
                                        <p><strong>C√¢u h·ªèi:</strong> @question.Text</p>
                                        <div class="answers-review">
                                            @foreach (var (answer, ansIndex) in question.Answers.Select((a, i) => (a, i)))
                                            {
                                                <div class="answer-review @(answer.IsCorrect ? "correct" : "")">
                                                    <span class="answer-label">@GetAnswerLabel(ansIndex)</span>
                                                    <span class="answer-text">@answer.Text</span>
                                                    @if (answer.IsCorrect)
                                                    {
                                                        <span class="correct-badge">ƒê√∫ng</span>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <div class="button-group">
                            <button class="btn-back" @onclick="PreviousStep">‚Üê Quay l·∫°i s·ª≠a</button>
                           <button class="btn-confirm-quiz" @onclick="SaveAndCreate">X√°c nh·∫≠n t·∫°o Quiz</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>
<Quiz.Shared.Footer />
@code {
    private QuizData quizData = new();
    private JsonElement? generatedQuestions1;
    private UploadedFile? uploadedFile;
    private bool isProcessing = false;
    private bool isDragging = false;
    private string errorMessage = "";
    private string successMessage = "";
    private string textContent = "";
    private InputMode inputMode = InputMode.Upload;
    private const long MaxFileSize = 10 * 1024 * 1024; // 10MB
    private JsonElement.ArrayEnumerator? generatedQuestions; 
    private string? knowledgeContent; 

    public enum InputMode
    {
        Upload,
        Text
    }

    public enum QuestionType
    {
        Quiz,
        Flashcard
    }

    public enum QuestionLevel
    {
        Recognition,
        Comprehension,
        Application,
        HighApplication
    }

    public class QuizData
    {
        public string Title { get; set; } = "";
        public int QuestionCount { get; set; } = 10;
        public string Description { get; set; } = "";
        public QuestionType QuestionType { get; set; } = QuestionType.Quiz;
        public QuestionLevel Level { get; set; } = QuestionLevel.Recognition;
    }

    public class UploadedFile
    {
        public string Name { get; set; } = "";
        public long Size { get; set; }
        public string Content { get; set; } = "";
        public string FileType { get; set; } = "";
    }

    private void SwitchInputMode(InputMode mode)
    {
        inputMode = mode;
        errorMessage = "";
        successMessage = "";

        // Clear data when switching
        if (mode == InputMode.Upload)
        {
            textContent = "";
        }
        else
        {
            uploadedFile = null;
        }
    }

    private int GetWordCount()
    {
        if (string.IsNullOrWhiteSpace(textContent))
            return 0;

        return textContent.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries).Length;
    }

    private string GetWordCountClass()
    {
        var count = GetWordCount();
        if (count >= 50)
            return "valid";
        if (count > 0)
            return "warning";
        return "";
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        errorMessage = "";
        successMessage = "";

        var file = e.File;

        try
        {
            // Validate file type
            var extension = Path.GetExtension(file.Name).ToLower();
            if (extension != ".pdf" && extension != ".docx" && extension != ".txt")
            {
                errorMessage = "Ch·ªâ h·ªó tr·ª£ file PDF, DOCX, TXT";
                return;
            }

            // Validate file size
            if (file.Size > MaxFileSize)
            {
                errorMessage = "File kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 10MB";
                return;
            }

            // Read file content
            string content;
            if (extension == ".txt")
            {
                // ƒê·ªçc file text tr·ª±c ti·∫øp
                using var stream = file.OpenReadStream(MaxFileSize);
                using var reader = new StreamReader(stream);
                content = await reader.ReadToEndAsync();
            }
            else
            {
                // ƒê·ªçc PDF/DOCX d∆∞·ªõi d·∫°ng base64
                using var stream = file.OpenReadStream(MaxFileSize);
                using var memoryStream = new MemoryStream();
                await stream.CopyToAsync(memoryStream);
                var bytes = memoryStream.ToArray();
                content = Convert.ToBase64String(bytes);
            }

            uploadedFile = new UploadedFile
            {
                Name = file.Name,
                Size = file.Size,
                Content = content,
                FileType = file.ContentType
            };

            successMessage = $"‚úì ƒê√£ t·∫£i l√™n: {file.Name}";
        }
        catch (Exception ex)
        {
            errorMessage = $"L·ªói ƒë·ªçc file: {ex.Message}";
            Console.WriteLine($"Error details: {ex}");
        }
    }

    private void HandleDragEnter(DragEventArgs e)
    {
        isDragging = true;
    }

    private void HandleDragLeave(DragEventArgs e)
    {
        isDragging = false;
    }

    private async Task HandleDrop(DragEventArgs e)
    {
        isDragging = false;
        // Note: Drag & drop v·ªõi InputFile c·∫ßn x·ª≠ l√Ω ƒë·∫∑c bi·ªát trong Blazor
        // T√≠nh nƒÉng n√†y c√≥ th·ªÉ c·∫ßn th√™m JavaScript helper
    }

    private void RemoveFile()
    {
        uploadedFile = null;
        errorMessage = "";
        successMessage = "";
    }

    private string GetFileIcon(string fileName)
    {
        var extension = Path.GetExtension(fileName).ToLower();
        return extension switch
        {
            ".pdf" => "üìÑ",
            ".docx" => "üìù",
            ".txt" => "üìÉ",
            _ => "üìÅ"
        };
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    private async Task CreateQuiz()
    {
        errorMessage = "";
        successMessage = "";

        if (string.IsNullOrWhiteSpace(quizData.Title))
        {
            errorMessage = "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ";
            return;
        }

        string knowledgeContent = inputMode == InputMode.Upload
            ? uploadedFile?.Content ?? ""
            : textContent ?? "";

        if (string.IsNullOrWhiteSpace(knowledgeContent))
        {
            errorMessage = "Vui l√≤ng nh·∫≠p ";
            return;
        }

        var wordCount = knowledgeContent.Split(new[] { ' ', '\n', '\r', '\t' }, StringSplitOptions.RemoveEmptyEntries).Length;
        if (wordCount == 0)
        {
            errorMessage = "N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
            return;
        }

        isProcessing = true;

        try
        {
            var generateRequest = new
            {
                knowledge = knowledgeContent,
                typeQuestion = quizData.QuestionType == QuestionType.Quiz ? "1 answer" : "flashcard",
                level = quizData.Level.ToString(),
                count = quizData.QuestionCount
            };

            var client = HttpClientFactory.CreateClient("FastApiClient");
            var response = await client.PostAsJsonAsync("/data-create-question-api/generate-quiz-ai", generateRequest);

            if (!response.IsSuccessStatusCode)
            {
                errorMessage = "Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi t·ª´ AI.";
                return;
            }

            // üß† Deserialize tr·ª±c ti·∫øp
            var json = await response.Content.ReadAsStringAsync();
            using var doc = JsonDocument.Parse(json);
            var dataElement = doc.RootElement.GetProperty("data");

            questions = new List<Question>();

            foreach (var item in dataElement.EnumerateArray())
            {
                var questionText = item.GetProperty("question").GetString() ?? "";

                // Deserialize answers as a dictionary (e.g., { "A": "...", "B": "...", ... })
                var answersDict = JsonSerializer.Deserialize<Dictionary<string, string>>(item.GetProperty("answers").ToString()) ?? new Dictionary<string, string>();

                // Extract correct answer keys (e.g., ["A", "C"])
                var correctKeys = item.GetProperty("correctAnswers")
                                      .EnumerateArray()
                                      .Select(x => x.GetString() ?? "")
                                      .ToList();

                // Map dictionary entries to List<Answer>, preserving key order (A,B,C,...)
                var answersList = answersDict.OrderBy(kv => kv.Key)
                                             .Select(kv => new Answer
                                         {
                                             Text = kv.Value ?? "",
                                             IsCorrect = correctKeys.Contains(kv.Key)
                                         })
                                             .ToList();

                var q = new Question
            {
                Text = questionText,
                Answers = answersList,
                CorrectAnswers = correctKeys
            };
                questions.Add(q);
                currentStep = 2;
            }

            successMessage = "‚úÖ ƒê√£ t·∫°o c√¢u h·ªèi th√†nh c√¥ng! H√£y xem l·∫°i v√† b·∫•m 'L∆∞u' n·∫øu ƒë·ªìng √Ω.";
        }
        catch (Exception ex)
        {
            errorMessage = $"L·ªói: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    public async Task SaveAndCreate()
    {
        errorMessage = "";
        successMessage = "";
        isProcessing = true;

        try
        {
            await JS.InvokeVoidAsync("console.log", "SaveAndCreate started", new { questionsCount = questions?.Count ?? 0, inputMode, title = quizData.Title });

            // üîπ Validate questions
            if (questions == null || !questions.Any())
            {
                errorMessage = "‚ö†Ô∏è Ch∆∞a c√≥ c√¢u h·ªèi n√†o ƒë∆∞·ª£c t·∫°o. H√£y t·∫°o tr∆∞·ªõc khi l∆∞u!";
                await JS.InvokeVoidAsync("console.warn", "SaveAndCreate aborted - no questions");
                return;
            }

            // üîπ Prepare knowledge content
            if (string.IsNullOrWhiteSpace(knowledgeContent))
            {
                knowledgeContent = inputMode == InputMode.Upload ? uploadedFile?.Content : textContent;
            }

            if (string.IsNullOrWhiteSpace(knowledgeContent))
            {
                errorMessage = "‚ö†Ô∏è Kh√¥ng c√≥ n·ªôi dung ki·∫øn th·ª©c ƒë·ªÉ l∆∞u!";
                await JS.InvokeVoidAsync("console.warn", "SaveAndCreate aborted - empty knowledgeContent");
                return;
            }

            // üîπ L·∫•y token t·ª´ localStorage
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrWhiteSpace(token))
            {
                errorMessage = "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y token. H√£y ƒëƒÉng nh·∫≠p l·∫°i!";
                return;
            }

            token = token.Trim();

            // üîπ Decode JWT ƒë·ªÉ l·∫•y userId
            int userId = 0;
            try
            {
                var parts = token.Split('.');
                if (parts.Length == 3)
                {
                    var payload = parts[1];
                    payload = payload.PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');
                    var jsonBytes = Convert.FromBase64String(payload);
                    var json = System.Text.Encoding.UTF8.GetString(jsonBytes);
                    var doc = System.Text.Json.JsonDocument.Parse(json);

                    if (doc.RootElement.TryGetProperty("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", out var userIdProp))
                    {
                        int.TryParse(userIdProp.GetString(), out userId);
                    }
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("console.error", "JWT parse failed", ex.Message);
            }

            if (userId == 0)
            {
                errorMessage = "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y userId h·ª£p l·ªá trong token!";
                return;
            }

            // üîπ G·∫Øn token v√†o HttpClient (Bearer)
            var backendClient = HttpClientFactory.CreateClient("FastApiClient");
            backendClient.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // üîπ Save knowledge content
            var saveKnowledgePayload = new
            {
                user_id = userId,
                text = knowledgeContent
            };

            await JS.InvokeVoidAsync("console.log", "Saving knowledge payload", saveKnowledgePayload);

            var saveKnowledgeResponse = await backendClient.PostAsJsonAsync("/data-create-question-api/data-create-question", saveKnowledgePayload);
            var saveKnowledgeBody = await saveKnowledgeResponse.Content.ReadAsStringAsync();
            await JS.InvokeVoidAsync("console.log", "SaveKnowledge response", new { status = (int)saveKnowledgeResponse.StatusCode, body = saveKnowledgeBody });

            if (!saveKnowledgeResponse.IsSuccessStatusCode)
            {
                errorMessage = "L·ªói khi l∆∞u n·ªôi dung ki·∫øn th·ª©c";
                Console.WriteLine($"SaveKnowledge failed: {saveKnowledgeBody}");
                return;
            }
            //Save title 
            var setQuizPayload = new SetQuizRequest
            {
                Title = quizData.Title,
                Description = quizData.Description
            };

            var setQuizResponse = await backendClient.PostAsJsonAsync("https://exe-backend-j428.onrender.com/api/SetQuiz/create", setQuizPayload);
            if (!setQuizResponse.IsSuccessStatusCode)
            {
                var error = await setQuizResponse.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"‚ùå L·ªói khi t·∫°o SetQuiz tr√™n backend: {error}");
                return;
            }

            // üîπ ƒê·ªçc SetQuizId tr·∫£ v·ªÅ t·ª´ backend
            var result = await setQuizResponse.Content.ReadFromJsonAsync<SetQuizResponse>();
            if (result == null || result.SetQuizId <= 0)
            {
                await JS.InvokeVoidAsync("alert", "‚ùå Kh√¥ng th·ªÉ l·∫•y ID c·ªßa SetQuiz v·ª´a t·∫°o!");
                return;
            }
            // üîπ Save questions
            int idx = 0;
            foreach (var question in questions)
            {
                idx++;

                // T·∫°o answers ƒë√∫ng ƒë·ªãnh d·∫°ng JSON object
                var answers = new Dictionary<string, string>();
                for (int i = 0; i < question.Answers.Count; i++)
                {
                    answers.Add($"additionalProp{i + 1}", question.Answers[i].Text);
                }

                var correctAnswers = question.Answers
                    .Where(a => a.IsCorrect)
                    .Select(a => a.Text)
                    .ToList();

                var payload = new
                {
                    setQuizId = result.SetQuizId,
                    question = question.Text,
                    answers = answers,
                    correctAnswers = correctAnswers
                };

                var payloadJson = System.Text.Json.JsonSerializer.Serialize(payload);
                await JS.InvokeVoidAsync("console.log", $"Saving question #{idx}", payloadJson);

                var saveResponse = await backendClient.PostAsJsonAsync("/question-api/questions", payload);
                var saveRespBody = await saveResponse.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("console.log", new
                {
                    questionIndex = idx,
                    status = (int)saveResponse.StatusCode,
                    body = saveRespBody
                });

                if (!saveResponse.IsSuccessStatusCode)
                {
                    errorMessage = $"‚ùå L·ªói khi l∆∞u c√¢u h·ªèi #{idx}";
                    Console.WriteLine($"Save question #{idx} failed: {saveRespBody}");
                    return;
                }
            }

            successMessage = "‚úÖ ƒê√£ l∆∞u th√†nh c√¥ng n·ªôi dung v√† c√¢u h·ªèi v√†o h·ªá th·ªëng!";
            await JS.InvokeVoidAsync("console.log", "SaveAndCreate completed successfully");

            Navigation.NavigateTo("/revision");
        }
        catch (Exception ex)
        {
            errorMessage = $"L·ªói khi l∆∞u: {ex.Message}";
            Console.WriteLine($"SaveAndCreate exception: {ex}");
            await JS.InvokeVoidAsync("console.error", "SaveAndCreate exception", ex.Message);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
    public class SetQuizResponse
    {
        public int SetQuizId { get; set; }
    }


    public class GenerateQuestionsResponse
    {
        public List<object> Questions { get; set; } = new();
        public string Message { get; set; } = "";
    }

    public class SaveKnowledgeResponse
    {
        public int Id { get; set; }
        public string Message { get; set; } = "";
    }

    public class SetQuizRequest()
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
    }

    public class QuizQuestion
{
    public string Question { get; set; } = "";
    public Dictionary<string, string> Answers { get; set; } = new();
    public List<string> CorrectAnswers { get; set; } = new();
    public string? SelectedAnswer { get; set; } // ƒë·ªÉ l∆∞u l·ª±a ch·ªçn ng∆∞·ªùi d√πng
}
    public class CreateQuizResponse
    {
        public int Id { get; set; }
        public string Message { get; set; } = "";
    }

   //private List<Question> questions = new List<Question>();

    public class QuestionCreateRequest
    {
        public int SetQuizId { get; set; }
        public string Question { get; set; } = string.Empty;
        public Dictionary<string, string> Answers { get; set; } = new();
        public List<string> CorrectAnswers { get; set; } = new();
    }
   


    private async Task OpenFileDialog()
    {
       await JS.InvokeVoidAsync("fileHelper.openFileDialog", "fileInput");
    }

    
   
    private int currentStep = 1;
    private string creationMethod = "";
    private string answerType = "single";
    private int currentQuestionIndex = 0;

    // Quiz form data
    private string quizTitle = "";
    private int quizTime = 30;
    private string quizDescription = "";

    private List<Question> questions = new List<Question>();

   
    protected override void OnInitialized()
    {
        // Initialize empty - user will add questions manually
    }

    private void NavigateToTab(int tab)
    {
        switch (tab)
        {
            case 0:
                Navigation.NavigateTo("/library");
                break;

            case 2:
                Navigation.NavigateTo("/revision");
                break;
            default:
                Navigation.NavigateTo("/");
                break;
        }

    }
    public class QuestionModel
{
    public string Question { get; set; } = string.Empty;
    public Dictionary<string, string> Answers { get; set; } = new();
    public List<string> CorrectAnswers { get; set; } = new();
}
    private void SelectCreationMethod(string method)
    {
        creationMethod = method;
    }

    private void NextStep()
    {
        if (currentStep == 1 )
        {
            currentStep = 2;
            // T·∫°o 1 c√¢u h·ªèi ƒë·∫ßu ti√™n
            if (questions.Count == 0)
            {
                AddNewQuestion();
            }
        }
    }

    private void PreviousStep()
    {
        if (currentStep > 1)
        {
            currentStep--;
        }
    }

    private void NextQuestion()
    {
        if (currentQuestionIndex < questions.Count - 1)
        {
            currentQuestionIndex++;
        }
    }

    private void PreviousQuestion()
    {
        if (currentQuestionIndex > 0)
        {
            currentQuestionIndex--;
        }
    }

    private void AddNewQuestion()
    {
        questions.Add(new Question
        {
            Text = "",
            Answers = new List<Answer>
            {
                new Answer { Text = "", IsCorrect = true },
                new Answer { Text = "", IsCorrect = false },
                new Answer { Text = "", IsCorrect = false },
                new Answer { Text = "", IsCorrect = false }
            }
        });
        // Di chuy·ªÉn t·ªõi c√¢u h·ªèi m·ªõi v·ª´a t·∫°o
        currentQuestionIndex = questions.Count - 1;
    }

    private void RemoveQuestion(int index)
    {
        if (questions.Count > 1)
        {
            questions.RemoveAt(index);
            // ƒêi·ªÅu ch·ªânh index n·∫øu c·∫ßn
            if (currentQuestionIndex >= questions.Count)
            {
                currentQuestionIndex = questions.Count - 1;
            }
        }
    }

    private void DeleteQuestionFromReview(int index)
    {
        if (questions.Count > 1)
        {
            questions.RemoveAt(index);
        }
    }

    private void SetCorrectAnswer(int questionIndex, int answerIndex)
    {
        foreach (var answer in questions[questionIndex].Answers)
        {
            answer.IsCorrect = false;
        }
        questions[questionIndex].Answers[answerIndex].IsCorrect = true;
    }

    private string GetAnswerLabel(int index)
    {
        return ((char)('A' + index)).ToString();
    }

    private void CreateQuiz1()
    {
        if (string.IsNullOrWhiteSpace(quizTitle))
        {
            JS.InvokeVoidAsync("alert", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ!");
            return;
        }

        if (questions.Count == 0)
        {
            JS.InvokeVoidAsync("alert", "Vui l√≤ng th√™m √≠t nh·∫•t 1 c√¢u h·ªèi!");
            return;
        }

        if (questions.Any(q => string.IsNullOrWhiteSpace(q.Text)))
        {
            JS.InvokeVoidAsync("alert", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß c√¢u h·ªèi!");
            return;
        }

        // Chuy·ªÉn sang b∆∞·ªõc 3 (Review)
        currentStep = 3;
    }

    private void EditQuestion(int index)
    {
        // Quay l·∫°i b∆∞·ªõc 2 ƒë·ªÉ s·ª≠a c√¢u h·ªèi
        currentStep = 2;
        currentQuestionIndex = index;
    }

   
    private void ResetForm()
    {
        currentStep = 1;
        creationMethod = "";
        quizTitle = "";
        quizDescription = "";
        questions.Clear();
        currentQuestionIndex = 0;
        answerType = "single";
        quizTime = 30;
    }

    public class Question
    {
        public string Text { get; set; }
        public string Quesion { get; set; }
        public List<Answer> Answers { get; set; }
        public List<string> CorrectAnswers { get; set; }    
    }

    public class Answer
    {
        public string Text { get; set; }
        public bool IsCorrect { get; set; }
    }

  

    private int GetUserIdFromToken(string token)
    {
        if (string.IsNullOrWhiteSpace(token))
            return 0;

        try
        {
            // JWT format: header.payload.signature
            var parts = token.Split('.');
            if (parts.Length != 3)
                return 0;

            var payload = parts[1];
            // Base64 decode
            payload = payload.PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=');
            var jsonBytes = Convert.FromBase64String(payload);
            var json = System.Text.Encoding.UTF8.GetString(jsonBytes);

            // Parse JSON
            var doc = System.Text.Json.JsonDocument.Parse(json);
            if (doc.RootElement.TryGetProperty("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier", out var userIdProp))
            {
                if (int.TryParse(userIdProp.GetString(), out int userId))
                    return userId;
            }
        }
        catch
        {
            // ignore
        }

        return 0;
    }
    private static byte[] ParseBase64WithoutPadding(string base64)
    {
        switch (base64.Length % 4)
        {
            case 2: base64 += "=="; break;
            case 3: base64 += "="; break;
        }
        return Convert.FromBase64String(base64);
    }
}

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;500;600;700;800&display=swap');

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    .quiz-creator-container {
        font-family: 'Baloo 2', cursive;
        min-height: 100vh;
        background: #ffffff;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .page-title {
        font-size: 36px;
        font-weight: 800;
        color: #1D059D;
        margin: 40px 0 30px;
    }

    /* Tabs */
    .tabs {
        display: flex;
        gap: 5px;
        border-bottom: 2px solid #e8e8e8;
        margin-bottom: 40px;
    }

    .tab {
        background: transparent;
        border: none;
        padding: 15px 25px;
        font-size: 24px;
        font-weight: 600;
        color: #718096;
        cursor: pointer;
        position: relative;
        font-family: 'Baloo 2', cursive;
    }

        .tab.active {
            color: #4318FF;
        }

            .tab.active::after {
                content: '';
                position: absolute;
                bottom: -2px;
                left: 0;
                right: 0;
                height: 3px;
                background: #4318FF;
            }

    .content-wrapper {
        min-height: 500px;
        margin-bottom: 60px;
    }

    .step-container {
        max-width: 900px;
        margin: 0 auto;
    }

    .step-title {
        font-size: 28px;
        font-weight: 700;
        color: #2D3748;
        text-align: center;
        margin-bottom: 40px;
    }

    /* Creation Options */
    .creation-options {
        display: flex;
        flex-direction: column;
        gap: 20px;
        margin-bottom: 40px;
    }

    .option-button {
        background: #1D059D;
        border: 3px solid transparent;
        padding: 50px 30px;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.3s;
        text-align: center;
        font-family: 'Baloo 2', cursive;
        color: white;
    }

        .option-button:hover {
            transform: translateY(-8px);
            box-shadow: 0 12px 35px rgba(67, 24, 255, 0.2);
            border-color: #4318FF;
        }

        .option-button.selected {
            border-color: #D5CEFD;
            background: #D5CEFD;
            box-shadow: 0 12px 35px rgba(67, 24, 255, 0.4);
        }

            .option-button.selected h3,
            .option-button.selected p {
                color: black;
            }

        .option-button h3 {
            font-size: 24px;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .option-button p {
            font-size: 16px;
        }

    /* Quiz Form */
    .quiz-form {
        border-radius: 20px;
        margin-bottom: 30px;
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group.half {
            grid-column: 2;
        }

        .form-group label {
            display: block;
            font-weight: 700;
            color: #2D3748;
            margin-bottom: 10px;
            font-size: 16px;
            margin-top: 10px;
        }

    .counter-display {
        background: #D5CEFD;
        padding: 12px 16px;
        border-radius: 12px;
        font-size: 16px;
        color: #2D1B69;
        font-weight: 600;
        margin-bottom: 15px;
    }

    .form-input, .form-textarea {
        width: 100%;
        padding: 14px 16px;
        border: 2px solid #D5CEFD;
        border-radius: 12px;
        font-size: 16px;
        font-family: 'Baloo 2', cursive;
        background: white;
        transition: border-color 0.3s;
    }

        .form-input:focus, .form-textarea:focus {
            outline: none;
            border-color: #4318FF;
        }

    .form-textarea {
        resize: vertical;
    }

    /* Radio Group */
    .radio-group {
        display: flex;
        gap: 30px;
    }

    .radio-label {
        display: flex;
        align-items: center;
        gap: 10px;
        font-weight: 600;
        color: #4318FF;
        cursor: pointer;
        font-size: 16px;
        margin: 0;
    }

        .radio-label input[type="radio"] {
            width: 20px;
            height: 20px;
            cursor: pointer;
        }

    .questions-section {
        margin-top: 30px;
    }

    .question-navigation {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        background: #D5CEFD;
        padding: 15px 20px;
        border-radius: 12px;
    }

    .question-counter {
        font-weight: 700;
        color: #2D1B69;
        font-size: 18px;
    }

    .btn-nav {
        background: #4318FF;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
    }

        .btn-nav:hover:not(:disabled) {
            background: #2D1B69;
            transform: translateY(-2px);
        }

        .btn-nav:disabled {
            opacity: 0.4;
            cursor: not-allowed;
        }

    .question-card {
        background: #D5CEFD;
        padding: 25px;
        border-radius: 16px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .question-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    .question-number {
        background: #2D1B69;
        color: white;
        width: 35px;
        height: 35px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 16px;
    }

    .btn-remove {
        background: transparent;
        border: none;
        font-size: 22px;
        cursor: pointer;
        opacity: 0.6;
        transition: opacity 0.2s;
    }

        .btn-remove:hover {
            opacity: 1;
        }

    .answer-item {
        display: flex;
        gap: 12px;
        align-items: center;
        margin-bottom: 12px;
    }

        .answer-item input[type="text"] {
            flex: 1;
        }

        .answer-item input[type="radio"],
        .answer-item input[type="checkbox"] {
            width: 22px;
            height: 22px;
            cursor: pointer;
        }

    .btn-add-question {
        background: #4318FF;
        color: white;
        border: none;
        padding: 14px 30px;
        border-radius: 12px;
        font-size: 16px;
        font-weight: 700;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        margin: 20px auto;
        transition: all 0.3s;
        display: block;
    }

        .btn-add-question:hover {
            background: #2D1B69;
            transform: translateY(-2px);
        }

    /* Buttons */
    .button-group {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-top: 40px;
    }

    .btn-next, .btn-back, .btn-create-quiz {
        padding: 16px 40px;
        border: none;
        border-radius: 12px;
        font-size: 18px;
        font-weight: 700;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
    }

    .btn-next {
        background: #D5CEFD;
        color: black;
        margin-left: 340px;
    }

        .btn-next:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            background: #4318FF;
            color: white;
        }

        .btn-next:not(:disabled):hover {
            background: #4318FF;
            color: white;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px rgba(67, 24, 255, 0.4);
        }

    .btn-back {
        background: #E2E8F0;
        color: #2D3748;
    }

        .btn-back:hover {
            background: #CBD5E0;
        }

    .btn-create-quiz {
        background: #1D059D;
        color: white;
        width: 100%;
        margin-top: 20px;
    }

        .btn-create-quiz:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-create-quiz:not(:disabled):hover {
            background: #1f1347;
            transform: translateY(-3px);
        }

    /* Review Section */
    .review-section {
        background: white;
        padding: 30px;
        border-radius: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.05);
    }

    .quiz-info-review {
        background: #D5CEFD;
        padding: 20px;
        border-radius: 12px;
        margin-bottom: 30px;
    }

        .quiz-info-review p {
            margin: 10px 0;
            font-size: 16px;
            color: #2D3748;
        }

        .quiz-info-review strong {
            color: #2D1B69;
        }

    .questions-list {
        margin-bottom: 30px;
    }

    .question-review-item {
        background: #F8F9FA;
        border: 2px solid #D5CEFD;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
    }

    .question-review-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 15px;
        border-bottom: 2px solid #D5CEFD;
    }

    .question-review-number {
        background: #2D1B69;
        color: white;
        padding: 8px 16px;
        border-radius: 8px;
        font-weight: 700;
        font-size: 14px;
    }

    .question-review-actions {
        display: flex;
        gap: 10px;
    }

    .btn-edit {
        background: #1D059D;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
        font-size: 14px;
    }

        .btn-edit:hover {
            background: #2D1B69;
            transform: translateY(-2px);
        }

    .btn-delete-review {
        background: #FF6B6B;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
        font-size: 14px;
    }

        .btn-delete-review:hover {
            background: #FA5252;
            transform: translateY(-2px);
        }

    .question-review-content {
        padding: 15px;
    }

        .question-review-content p {
            margin-bottom: 15px;
            font-size: 16px;
            color: #2D3748;
        }

    .answers-review {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .answer-review {
        background: white;
        border: 2px solid #D5CEFD;
        border-radius: 8px;
        padding: 12px 15px;
        display: flex;
        align-items: center;
        gap: 12px;
        transition: all 0.3s;
    }

        .answer-review.correct {
            background: #E6FFE6;
            border-color: #70E539;
        }

    .answer-label {
        background: #1D059D;
        color: white;
        width: 35px;
        height: 35px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        font-size: 14px;
        flex-shrink: 0;
    }

    .answer-text {
        flex: 1;
        color: #2D3748;
        font-size: 15px;
    }

    .correct-badge {
        background: #70E539;
        color: white;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 700;
        flex-shrink: 0;
    }

    .btn-confirm-quiz {
        background: #1D059D;
        color: white;
        border: none;
        padding: 16px 40px;
        border-radius: 12px;
        font-size: 18px;
        font-weight: 700;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
    }

        .btn-confirm-quiz:hover {
            background: #70E539;
            transform: translateY(-3px);
            box-shadow: 0 8px 25px;
        }

    /* Animation */
    .fade-in {
        animation: fadeIn 0.5s ease-in;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .creation-options {
            grid-template-columns: 1fr;
        }

        .form-row {
            grid-template-columns: 1fr;
        }

        .btn-next {
            margin-left: 0;
        }

        .question-navigation {
            flex-direction: column;
            gap: 10px;
        }

        .question-review-actions {
            flex-direction: column;
            width: 100%;
        }

        .btn-edit, .btn-delete-review {
            width: 100%;
        }
    }
     .form-grid {
        display: grid;
        grid-template-columns: 1fr 200px;
        gap: 30px;
        margin-bottom: 30px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .form-label {
        font-size: 16px;
        font-weight: 700;
        color: #1f2937;
    }

    .form-input {
        background: #ddd6fe;
        border: none;
        border-radius: 12px;
        padding: 15px 20px;
        font-family: 'Baloo 2', cursive;
        font-size: 16px;
        color: #1f2937;
        outline: none;
    }

    .form-input:focus {
        background: #c4b5fd;
    }

    .form-textarea {
        min-height: 120px;
        resize: vertical;
    }

    .question-type {
        margin-top: 30px;
        margin-bottom : 20px;
    }

    .radio-group {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-top: 10px;
    }

    .radio-option {
        display: flex;
        align-items: center;
        gap: 10px;
        cursor: pointer;
    }

    .radio-option input[type="radio"] {
        width: 24px;
        height: 24px;
        accent-color: #5b21b6;
        cursor: pointer;
    }

    .radio-option label {
        font-size: 16px;
        font-weight: 600;
        color: #1f2937;
        cursor: pointer;
    }

    .upload-section {
        background: #ddd6fe;
        border-radius: 16px;
        padding: 40px;
        text-align: center;
        margin-top: 30px;
        position: relative;
        transition: all 0.3s;
    }

    .upload-section.dragover {
        background: #c4b5fd;
        border: 2px dashed #5b21b6;
    }

    .upload-section.disabled {
        background: #e5e7eb;
        opacity: 0.6;
        pointer-events: none;
    }

    .input-mode-selector {
        display: flex;
        gap: 15px;
        margin-bottom: 25px;
        background: #f3f4f6;
        padding: 8px;
        border-radius: 12px;
    }

    .input-mode-btn {
        flex: 1;
        padding: 12px 20px;
        border: none;
        border-radius: 8px;
        font-family: 'Baloo 2', cursive;
        font-size: 16px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
        background: transparent;
        color: #6b7280;
    }

    .input-mode-btn.active {
        background: #5b21b6;
        color: white;
    }

    .input-mode-btn:hover:not(.active) {
        background: #e5e7eb;
    }

    .text-input-section {
        margin-top: 30px;
    }

    .text-input-area {
        width: 100%;
        min-height: 300px;
        background: #ddd6fe;
        border: 2px solid #c4b5fd;
        border-radius: 12px;
        padding: 20px;
        font-family: 'Baloo 2', cursive;
        font-size: 16px;
        color: #1f2937;
        outline: none;
        resize: vertical;
    }

    .text-input-area:focus {
        background: #c4b5fd;
        border-color: #5b21b6;
    }

    .word-count {
        text-align: right;
        margin-top: 8px;
        font-size: 20px;
        color: black;
        font-weight: 600;
    }

    .word-count.warning {
        color: #black;
    }

    .word-count.valid {
        color: #059669;
    }

    .upload-icon {
        width: 80px;
        height: 80px;
        margin: 0 auto 20px;
    }

    .upload-icon svg {
        width: 100%;
        height: 100%;
    }

    .upload-title {
        font-size: 22px;
        font-weight: 700;
        color: #1f2937;
        margin-bottom: 10px;
    }

    .upload-subtitle {
        font-size: 14px;
        color: #6b7280;
        margin-bottom: 20px;
    }

    .btn-upload {
        background: #5b21b6;
        color: white;
        padding: 12px 35px;
        border-radius: 8px;
        border: none;
        font-family: 'Baloo 2', cursive;
        font-size: 16px;
        font-weight: 700;
        cursor: pointer;
        transition: background 0.3s;
    }

    .btn-upload:hover {
        background: #4c1d95;
    }

    .file-input {
        display: none;
    }

    .uploaded-file {
        margin-top: 20px;
        padding: 15px;
        background: white;
        border-radius: 10px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .file-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .file-icon {
        font-size: 24px;
    }

    .file-details {
        text-align: left;
    }

    .file-name {
        font-weight: 600;
        color: #1f2937;
    }

    .file-size {
        font-size: 12px;
        color: #6b7280;
    }

    .remove-file {
        background: #ef4444;
        color: white;
        border: none;
        border-radius: 6px;
        padding: 8px 15px;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        font-weight: 600;
    }

    .remove-file:hover {
        background: #dc2626;
    }

    .btn-submit {
        background: #5b21b6;
        color: white;
        padding: 15px 200px;
        border-radius: 10px;
        border: none;
        font-family: 'Baloo 2', cursive;
        font-size: 18px;
        font-weight: 700;
        cursor: pointer;
        margin-top: 30px;
        transition: background 0.3s;
        margin-left: 300px;
    }

    .btn-submit:hover {
        background: #4c1d95;
    }

    .btn-submit:disabled {
        background: #9ca3af;
        cursor: not-allowed;
    }

    .loading {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #ffffff;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spin 1s linear infinite;
        margin-right: 10px;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }

    .error-message {
        background: #fee2e2;
        color: #991b1b;
        padding: 15px;
        border-radius: 10px;
        margin-top: 20px;
        font-weight: 600;
    }

    .success-message {
        background: #d1fae5;
        color: #065f46;
        padding: 15px;
        border-radius: 10px;
        margin-top: 20px;
        font-weight: 600;
    }
</style>