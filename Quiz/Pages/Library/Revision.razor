@page "/revision"
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http

@* Import Google Font *@
<link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;600;700&display=swap" rel="stylesheet">
<Quiz.Shared.Header />
<style>
    body {
        font-family: 'Baloo 2', sans-serif;
        background-color: #fff;
        color: #1D059D;
        margin: 0;
        padding: 0;
    }

    .container {
        max-width: 1100px;
        margin: 40px auto;
        padding: 0 20px;
    }

    .page-title {
        font-size: 1.8rem;
        font-weight: 700;
        margin-bottom: 10px;
    }

   .tabs {
        display: flex;
        gap: 5px;
        border-bottom: 2px solid #e8e8e8;
        margin-bottom: 40px;
    }

    .tab {
        background: transparent;
        border: none;
        padding: 15px 25px;
        font-size: 24px;
        font-weight: 600;
        color: #718096;
        cursor: pointer;
        position: relative;
        font-family: 'Baloo 2', cursive;
    }

    .tab.active {
        color: #4318FF;
    }

    .tab.active::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        right: 0;
        height: 3px;
        background: #4318FF;
    }


    .create-section {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 25px;
    }

    .create-button {
        background-color: #1D059D;
        color: white;
        border: none;
        border-radius: 10px;
        padding: 10px 18px;
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 8px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .create-button:hover {
        background-color: #2A0CD8;
    }

    .folder-label {
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 600;
        color: #1D059D;
        margin-bottom: 20px;
    }

    .quiz-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(230px, 1fr));
        gap: 20px;
    }

    .quiz-card {
        background-color: #E9E3FF;
        border-radius: 12px;
        padding: 15px 18px;
        color: #1D059D;
        font-size: 0.95rem;
        line-height: 1.4;
        transition: all 0.25s ease;
    }

    .quiz-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 15px rgba(29, 5, 157, 0.15);
    }

    .quiz-date {
        font-weight: 600;
        display: flex;
        align-items: center;
        gap: 5px;
        margin-bottom: 5px;
    }

    .quiz-title {
        font-size: 1.1rem;
        font-weight: 700;
        margin-bottom: 5px;
    }

    .quiz-info {
        color: #333;
        font-size: 0.9rem;
    }

    .quiz-info span {
        display: block;
        font-weight: 600;
        color: #1D059D;
    }
</style>

<div class="container">
    <div class="page-title">Th∆∞ vi·ªán b√†i h·ªçc</div>

   <div class="tabs">
              <button class="tab active" @onclick="() => NavigateToTab(2)">√în t·∫≠p</button>
           
            <button class="tab " @onclick="() => NavigateToTab(1)">T·∫°o Quiz</button>
          
        </div>


    <div class="create-section">
        <button class="create-button">
            <span>‚ûï</span> T·∫°o m·ªõi
        </button>
    </div>

    <div class="folder-label">üìÇ C√°c m·ª•c ƒë√£ t·∫°o</div>

    <div class="quiz-grid">
        @if (setQuizzes == null)
        {
            <p>‚è≥ ƒêang t·∫£i d·ªØ li·ªáu...</p>
        }
        else if (!setQuizzes.Any())
        {
            <p>üò¢ B·∫°n ch∆∞a c√≥ b·ªô quiz n√†o.</p>
        }
        else
        {
            @foreach (var quiz in setQuizzes)
            {
                <div class="quiz-card" @onclick="() => OnQuizClick(quiz)">
                    <div class="quiz-date">üïì @quiz.CreatedAt.ToString("dd/MM/yyyy")</div>
                    <div class="quiz-title">@quiz.Title</div>
                    <div class="quiz-info">
                       
                    </div>
                </div>
            }
        }
    </div>
</div>
<Quiz.Shared.Footer />
@code {
    private List<SetQuiz>? setQuizzes;
    public class SetQuiz()
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public DateTime CreatedAt { get; set; }
        public string Type { get; set; }
    }
    private void NavigateToTab(int tab)
    {
        switch(tab)
        {
            case 0:
                Navigation.NavigateTo("/library");
                break;

            case 1:
                Navigation.NavigateTo("/create-quiz");
                break;
            default:
                Navigation.NavigateTo("/");
                break;
        }

    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrWhiteSpace(token))
            {
                Console.WriteLine("‚ùå Token kh√¥ng t·ªìn t·∫°i. Redirect sang login.");
                Navigation.NavigateTo("/login");
                return;
            }

            token = token.Trim();

            var request = new HttpRequestMessage(HttpMethod.Get, "https://exe-backend-j428.onrender.com/api/SetQuiz/user-setQuiz");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                setQuizzes = await response.Content.ReadFromJsonAsync<List<SetQuiz>>();
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Console.WriteLine("‚ùå 401 Unauthorized. Redirect sang login.");
                Navigation.NavigateTo("/login");
            }
            else
            {
                Console.WriteLine($"‚ùå L·ªói t·∫£i d·ªØ li·ªáu: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå L·ªói t·∫£i d·ªØ li·ªáu: {ex.Message}");
        }
    }

    public void OnQuizClick(SetQuiz quiz)
    {
        if(quiz.Type == "1 anwser" || quiz.Type == "multiple")
        {
            Navigation.NavigateTo($"/practice/{quiz.Id}");
        }
        else if (quiz.Type == "flashcard")
        {
            Navigation.NavigateTo($"/flashcard-practice/{quiz.Id}");
        }

    }

}
