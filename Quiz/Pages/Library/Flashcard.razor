@page "/flashcard-practice/{setQuizId:int}"
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http

<link href="https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;600;700;800&display=swap" rel="stylesheet">

<div class="flashcard-practice-container">
    <div class="container">
        <h1 class="page-title">Thư viện bài học</h1>

        <div class="tabs">
            <button class="tab">Upload tài liệu</button>
            <button class="tab">Tạo Quiz</button>
            <button class="tab active">Ôn tập</button>
        </div>

        <h2 class="section-title">Ôn tập - Flashcard</h2>

        @if (isLoading)
        {
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>Đang tải flashcards...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-message">
                ❌ @errorMessage
            </div>
        }
        else if (!quizStarted)
        {
            <!-- Preview Mode -->
            <div class="flashcard-viewer">
                <div class="flashcard-card" @onclick="FlipCard">
                    <div class="flashcard-content @(isFlipped ? "flipped" : "")">
                        <div class="flashcard-front">
                            <div class="card-label">Thuật ngữ</div>
                            <div class="card-text">@GetCurrentTerm()</div>
                        </div>
                        <div class="flashcard-back">
                            <div class="card-label">Định nghĩa</div>
                            <div class="card-text">@GetCurrentDefinition()</div>
                        </div>
                    </div>
                </div>

                <div class="flashcard-progress">
                    @(currentIndex + 1)/@flashcards.Count
                </div>

                <div class="flashcard-nav">
                    <button class="btn-nav btn-prev" @onclick="PreviousCard" disabled="@(currentIndex == 0)">
                        <span>‹</span>
                    </button>
                    <button class="btn-nav btn-next" @onclick="NextCard" disabled="@(currentIndex >= flashcards.Count - 1)">
                        <span>›</span>
                    </button>
                </div>
            </div>

            <div class="scroll-indicator">
                <span>⌄</span>
                <p>Kéo xuống để xem tất cả</p>
            </div>

            <div class="list-view-section">
                <div class="list-header">
                    <h3>Xem trước bài ôn tập</h3>
                    <span class="list-count">Số lượng flashcard: @flashcards.Count</span>
                </div>

                <div class="flashcards-list">
                    @foreach (var (card, index) in flashcards.Select((c, i) => (c, i)))
                    {
                        <div class="flashcard-list-item">
                            <div class="list-item-content">
                                <div class="list-item-term">
                                    <strong>Thuật ngữ:</strong> @card.Term
                                </div>
                                <div class="list-item-definition">
                                    <strong>Định nghĩa:</strong> @card.Definition
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <div class="practice-button-container">
                    <button class="btn-practice" @onclick="StartPractice">
                        Bắt đầu kiểm tra
                    </button>
                </div>
            </div>
        }
        else if (showResults)
        {
            <!-- Results Mode -->
            <div class="results-container">
                <h2 class="results-title">Kết quả kiểm tra</h2>
                <div class="score-display">
                    <div class="score-circle">
                        <div class="score-number">@GetCorrectCount()/@flashcards.Count</div>
                        <div class="score-label">Đúng</div>
                    </div>
                </div>

                <div class="results-list">
                    @foreach (var (card, index) in flashcards.Select((c, i) => (c, i)))
                    {
                        var isCorrect = card.UserAnswer == card.Definition;
                        <div class="result-item @(isCorrect ? "correct" : "incorrect")">
                            <div class="result-header">
                                <span class="result-number">Câu @(index + 1)</span>
                                <span class="result-badge @(isCorrect ? "badge-correct" : "badge-incorrect")">
                                    @(isCorrect ? "✓ Đúng" : "✗ Sai")
                                </span>
                            </div>
                            <div class="result-question">@card.Term</div>
                            <div class="result-answer">
                                <strong>Đáp án đúng:</strong> @card.Definition
                            </div>
                            @if (!isCorrect)
                            {
                                <div class="result-user-answer">
                                    <strong>Bạn đã chọn:</strong> @card.UserAnswer
                                </div>
                            }
                        </div>
                    }
                </div>

                <div class="results-actions">
                    <button class="btn-retry" @onclick="RetryQuiz">Làm lại</button>
                    <button class="btn-back" @onclick="BackToLibrary">Quay lại thư viện</button>
                </div>
            </div>
        }
        else
        {
            <!-- Quiz Mode -->
            <div class="quiz-container">
                <div class="quiz-progress-bar">
                    <div class="progress-fill" style="width: @GetProgressPercentage()%"></div>
                </div>
                <div class="quiz-progress-text">
                    Câu @(currentQuizIndex + 1)/@flashcards.Count
                </div>

                <div class="quiz-question-card">
                    <div class="quiz-question">
                        <strong>Định nghĩa:</strong> @GetCurrentQuizDefinition()
                    </div>

                    <div class="quiz-options">
                        @foreach (var (option, index) in GetCurrentQuizOptions().Select((o, i) => (o, i)))
                        {
                            <button class="quiz-option @GetOptionClass(option)" 
                                    @onclick="() => SelectAnswer(option)"
                                    disabled="@(selectedAnswer != null)">
                                <span class="option-letter">@GetOptionLetter(index)</span>
                                <span class="option-text">@option</span>
                            </button>
                        }
                    </div>

                    @if (selectedAnswer != null)
                    {
                        <div class="quiz-feedback @(IsAnswerCorrect() ? "feedback-correct" : "feedback-incorrect")">
                            @if (IsAnswerCorrect())
                            {
                                <span>✓ Chính xác!</span>
                            }
                            else
                            {
                                <span>✗ Sai rồi. Đáp án đúng là: @flashcards[currentQuizIndex].Term</span>
                            }
                        </div>

                        <div class="quiz-next-container">
                            <button class="btn-next-question" @onclick="NextQuestion">
                                @(currentQuizIndex < flashcards.Count - 1 ? "Câu tiếp theo →" : "Xem kết quả")
                            </button>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public int setQuizId { get; set; }

    private int currentIndex = 0;
    private int currentQuizIndex = 0;
    private bool isFlipped = false;
    private bool isLoading = true;
    private bool quizStarted = false;
    private bool showResults = false;
    private string errorMessage = "";
    private string? selectedAnswer = null;
    private List<FlashcardItem> flashcards = new List<FlashcardItem>();
    private List<string> currentQuizOptions = new List<string>();

    public class ApiQuestion
    {
        [System.Text.Json.Serialization.JsonPropertyName("_id")]
        public string _id { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("setQuizId")]
        public int SetQuizId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("question")]
        public string Question { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("answers")]
        public Dictionary<string, string> Answers { get; set; } = new();

        [System.Text.Json.Serialization.JsonPropertyName("correctAnswers")]
        public List<string> CorrectAnswers { get; set; } = new();
    }

    public class FlashcardItem
    {
        public string Term { get; set; } = ""; // Thuật ngữ (Question)
        public string Definition { get; set; } = ""; // Định nghĩa (Correct Answer)
        public string? UserAnswer { get; set; } // Câu trả lời của user
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadFlashcards();
    }

    private async Task LoadFlashcards()
    {
        isLoading = true;
        errorMessage = "";

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (string.IsNullOrWhiteSpace(token))
            {
                errorMessage = "Bạn chưa đăng nhập. Vui lòng đăng nhập lại.";
                Navigation.NavigateTo("/login");
                return;
            }

            var request = new HttpRequestMessage(HttpMethod.Get, 
                $"https://exe-createquiz.onrender.com/question-api/questions/{setQuizId}");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token.Trim());

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var responseText = await response.Content.ReadAsStringAsync();
                var apiQuestions = System.Text.Json.JsonSerializer.Deserialize<List<ApiQuestion>>(responseText);

                if (apiQuestions == null || !apiQuestions.Any())
                {
                    errorMessage = "Không tìm thấy câu hỏi nào.";
                    return;
                }

                // Convert to flashcards
                flashcards = apiQuestions.Select(q => new FlashcardItem
                {
                    Term = q.Question, // Thuật ngữ = Question
                    Definition = GetCorrectAnswer(q), // Định nghĩa = Correct Answer
                    UserAnswer = null
                }).ToList();

                Console.WriteLine($"✅ Loaded {flashcards.Count} flashcards");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                errorMessage = "Phiên đăng nhập hết hạn. Vui lòng đăng nhập lại.";
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = $"Không thể tải dữ liệu. Mã lỗi: {response.StatusCode}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi: {ex.Message}";
            Console.WriteLine($"Error: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetCorrectAnswer(ApiQuestion q)
    {
        if (q.CorrectAnswers != null && q.CorrectAnswers.Any())
            return q.CorrectAnswers.First(); // Lấy trực tiếp nội dung

        // fallback: nếu không có correctAnswers thì lấy value đầu tiên trong answers
        if (q.Answers != null && q.Answers.Any())
            return q.Answers.Values.First();

        return "";
    }

    // Preview Mode Methods
    private string GetCurrentTerm() => currentIndex < flashcards.Count ? flashcards[currentIndex].Term : "";
    private string GetCurrentDefinition() => currentIndex < flashcards.Count ? flashcards[currentIndex].Definition : "";

    private void FlipCard() => isFlipped = !isFlipped;

    private void NextCard()
    {
        if (currentIndex < flashcards.Count - 1)
        {
            currentIndex++;
            isFlipped = false;
        }
    }

    private void PreviousCard()
    {
        if (currentIndex > 0)
        {
            currentIndex--;
            isFlipped = false;
        }
    }

    // Quiz Mode Methods
    private void StartPractice()
    {
        quizStarted = true;
        currentQuizIndex = 0;
        selectedAnswer = null;
        
        // Reset user answers
        foreach (var card in flashcards)
        {
            card.UserAnswer = null;
        }

        GenerateQuizOptions();
    }

    private void GenerateQuizOptions()
    {
        var currentCard = flashcards[currentQuizIndex];
        var options = new List<string> { currentCard.Term }; // Đáp án đúng

        // Lấy 3 đáp án sai ngẫu nhiên từ các flashcard khác
        var wrongOptions = flashcards
            .Where(f => f.Term != currentCard.Term)
            .OrderBy(x => Random.Shared.Next())
            .Take(3)
            .Select(f => f.Term)
            .ToList();

        options.AddRange(wrongOptions);

        // Shuffle options
        currentQuizOptions = options.OrderBy(x => Random.Shared.Next()).ToList();
    }

    private string GetCurrentQuizDefinition() => flashcards[currentQuizIndex].Definition;
    private List<string> GetCurrentQuizOptions() => currentQuizOptions;

    private void SelectAnswer(string answer)
    {
        selectedAnswer = answer;
        flashcards[currentQuizIndex].UserAnswer = answer;
    }

    private bool IsAnswerCorrect() => selectedAnswer == flashcards[currentQuizIndex].Term;

    private string GetOptionClass(string option)
    {
        if (selectedAnswer == null) return "";
        
        var correctAnswer = flashcards[currentQuizIndex].Term;
        
        if (option == correctAnswer)
            return "option-correct";
        
        if (option == selectedAnswer && option != correctAnswer)
            return "option-incorrect";
        
        return "option-disabled";
    }

    private string GetOptionLetter(int index) => ((char)('A' + index)).ToString();

    private void NextQuestion()
    {
        if (currentQuizIndex < flashcards.Count - 1)
        {
            currentQuizIndex++;
            selectedAnswer = null;
            GenerateQuizOptions();
        }
        else
        {
            ShowResults();
        }
    }

    private double GetProgressPercentage() => ((double)(currentQuizIndex + 1) / flashcards.Count) * 100;

    // Results Methods
    private void ShowResults()
    {
        showResults = true;
        quizStarted = false;
    }

    private int GetCorrectCount() => flashcards.Count(f => f.UserAnswer == f.Term);

    private void RetryQuiz()
    {
        showResults = false;
        StartPractice();
    }

    private void BackToLibrary()
    {
        Navigation.NavigateTo("/revision-list");
    }
}

<style>
    @@import url('https://fonts.googleapis.com/css2?family=Baloo+2:wght@400;500;600;700;800&display=swap');

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Baloo 2', cursive;
        background: #ffffff;
    }

    .flashcard-practice-container {
        min-height: 100vh;
        padding: 40px 20px;
        background: #ffffff;
    }

    .container {
        max-width: 900px;
        margin: 0 auto;
    }

    .page-title {
        font-size: 32px;
        font-weight: 800;
        color: #4318FF;
        margin-bottom: 20px;
    }

    .tabs {
        display: flex;
        gap: 5px;
        border-bottom: 2px solid #e8e8e8;
        margin-bottom: 30px;
    }

    .tab {
        background: transparent;
        border: none;
        padding: 12px 20px;
        font-size: 16px;
        font-weight: 600;
        color: #718096;
        cursor: pointer;
        position: relative;
        font-family: 'Baloo 2', cursive;
    }

    .tab.active {
        color: #4318FF;
    }

    .tab.active::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        right: 0;
        height: 3px;
        background: #4318FF;
    }

    .section-title {
        font-size: 20px;
        font-weight: 700;
        color: #2D3748;
        margin-bottom: 30px;
    }

    /* Loading */
    .loading-container {
        text-align: center;
        padding: 60px 20px;
    }

    .loading-spinner {
        width: 50px;
        height: 50px;
        border: 4px solid #E9E3FF;
        border-top-color: #4318FF;
        border-radius: 50%;
        margin: 0 auto 20px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }

    .error-message {
        background: #fee2e2;
        color: #991b1b;
        padding: 20px;
        border-radius: 12px;
        text-align: center;
        font-weight: 600;
    }

    /* Flashcard Viewer */
    .flashcard-viewer {
        margin-bottom: 60px;
    }

    .flashcard-card {
        width: 100%;
        height: 400px;
        perspective: 1000px;
        cursor: pointer;
        margin-bottom: 20px;
    }

    .flashcard-content {
        position: relative;
        width: 100%;
        height: 100%;
        transition: transform 0.6s;
        transform-style: preserve-3d;
    }

    .flashcard-content.flipped {
        transform: rotateY(180deg);
    }

    .flashcard-front,
    .flashcard-back {
        position: absolute;
        width: 100%;
        height: 100%;
        backface-visibility: hidden;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        border-radius: 20px;
        padding: 40px;
    }

    .flashcard-front {
        background: linear-gradient(135deg, #E9E3FF 0%, #D5CEFD 100%);
    }

    .flashcard-back {
        transform: rotateY(180deg);
        background: linear-gradient(135deg, #C4B5FD 0%, #A78BFA 100%);
    }

    .card-label {
        font-size: 14px;
        font-weight: 600;
        color: #805AD5;
        text-transform: uppercase;
        margin-bottom: 20px;
        letter-spacing: 1px;
    }

    .card-text {
        font-size: 24px;
        font-weight: 700;
        color: #2D1B69;
        text-align: center;
        line-height: 1.5;
    }

    .flashcard-progress {
        text-align: center;
        font-size: 24px;
        font-weight: 700;
        color: #4318FF;
        margin-bottom: 20px;
    }

    .flashcard-nav {
        display: flex;
        justify-content: center;
        gap: 20px;
    }

    .btn-nav {
        background: #9F7AEA;
        color: white;
        border: none;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        font-size: 32px;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-nav:hover:not(:disabled) {
        background: #805AD5;
        transform: scale(1.1);
    }

    .btn-nav:disabled {
        background: #CBD5E0;
        cursor: not-allowed;
        opacity: 0.5;
    }

    /* Scroll Indicator */
    .scroll-indicator {
        text-align: center;
        margin: 40px 0;
        color: #718096;
    }

    .scroll-indicator span {
        font-size: 48px;
        display: block;
        animation: bounce 2s infinite;
    }

    @@keyframes bounce {
        0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
        40% { transform: translateY(-10px); }
        60% { transform: translateY(-5px); }
    }

    /* List View */
    .list-view-section {
        margin-top: 60px;
        padding-top: 40px;
        border-top: 3px solid #E9E3FF;
    }

    .list-header h3 {
        font-size: 24px;
        font-weight: 700;
        color: #2D3748;
        margin-bottom: 10px;
    }

    .list-count {
        display: inline-block;
        background: #E9E3FF;
        color: #1D059D;
        padding: 8px 16px;
        border-radius: 8px;
        font-size: 14px;
        font-weight: 600;
    }

    .flashcards-list {
        margin: 30px 0;
    }

    .flashcard-list-item {
        background: #E9E3FF;
        border-radius: 12px;
        margin-bottom: 15px;
        padding: 20px;
    }

    .list-item-content {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .list-item-term,
    .list-item-definition {
        font-size: 16px;
        line-height: 1.6;
        color: #2D3748;
    }

    .practice-button-container {
        text-align: center;
        margin-top: 40px;
    }

    .btn-practice {
        background: #4318FF;
        color: white;
        border: none;
        padding: 16px 60px;
        border-radius: 12px;
        font-size: 18px;
        font-weight: 700;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
    }

    .btn-practice:hover {
        background: #3311CC;
        transform: translateY(-3px);
        box-shadow: 0 8px 25px rgba(67, 24, 255, 0.4);
    }

    /* Quiz Mode */
    .quiz-container {
        max-width: 700px;
        margin: 0 auto;
    }

    .quiz-progress-bar {
        width: 100%;
        height: 8px;
        background: #E9E3FF;
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 10px;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #4318FF, #9F7AEA);
        transition: width 0.3s;
    }

    .quiz-progress-text {
        text-align: center;
        font-size: 16px;
        font-weight: 600;
        color: #718096;
        margin-bottom: 30px;
    }

    .quiz-question-card {
        background: white;
        border-radius: 16px;
        padding: 30px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    .quiz-question {
        font-size: 20px;
        font-weight: 600;
        color: #2D3748;
        margin-bottom: 30px;
        line-height: 1.6;
    }

    .quiz-options {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-bottom: 20px;
    }

    .quiz-option {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 15px 20px;
        background: #F7FAFC;
        border: 2px solid #E2E8F0;
        border-radius: 12px;
        cursor: pointer;
        transition: all 0.3s;
        font-family: 'Baloo 2', cursive;
        font-size: 16px;
        text-align: left;
    }

    .quiz-option:hover:not(:disabled) {
        border-color: #4318FF;
        background: #EBF4FF;
    }

    .quiz-option:disabled {
        cursor: not-allowed;
    }

    .option-letter {
        width: 32px;
        height: 32px;
        background: #4318FF;
        color: white;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 700;
        flex-shrink: 0;
    }

    .option-text {
        flex: 1;
        color: #2D3748;
        font-weight: 600;
    }

    .option-correct {
        background: #d1fae5;
        border-color: #059669;
    }

    .option-correct .option-letter {
        background: #059669;
    }

    .option-incorrect {
        background: #fee2e2;
        border-color: #dc2626;
    }

    .option-incorrect .option-letter {
        background: #dc2626;
    }

    .option-disabled {
        opacity: 0.5;
    }

    .quiz-feedback {
        padding: 15px;
        border-radius: 10px;
        font-weight: 600;
        text-align: center;
        margin-top: 20px;
    }

    .feedback-correct {
        background: #d1fae5;
        color: #065f46;
    }

    .feedback-incorrect {
        background: #fee2e2;
        color: #991b1b;
    }

    .quiz-next-container {
        text-align: center;
        margin-top: 20px;
    }

    .btn-next-question {
        background: #4318FF;
        color: white;
        border: none;
        padding: 12px 40px;
        border-radius: 10px;
        font-size: 16px;
        font-weight: 700;
        cursor: pointer;
        font-family: 'Baloo 2', cursive;
        transition: all 0.3s;
    }

    .btn-next-question:hover {
        background: #3311CC;
    }

    /* Results */
    .results-container {
        max-width: 700px;
        margin: 0 auto;
    }

    .results-title {
        font-size: 28px;
        font-weight: 700;
        color: #2D3748;
        text-align: center;
        margin-bottom: 30px;
    }

    .score-display {
        text-align: center;
        margin-bottom: 40px;
    }

    .score-circle {
        display: inline-block;
        width: 150px;
        height: 150px;
        border-radius: 50%;
        background: linear-gradient(135deg, #E9E3FF, #C4B5FD);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .score-number {
        font-size: 36px;
        font-weight: 800;
        color: #4318FF;
    }

    .score-label {
        font-size: 16px;
        font-weight: 600;
        color: #718096;
    }

    .results-list {
        margin-bottom: 30px;
    }

    .result-item {
        background: white;
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 15px;
        border: 2px solid #E2E8F0;
    }

    .result-item.correct {
        border-color: #059669;
        background: #f0fdf4;
    }

    .result-item.incorrect {
        border-color: #dc2626;
        background: #fef2f2;
    }

    .result-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

    .result-number {
        font-weight: 700;
        color: #4318FF;
    }

    .result-badge {
        padding: 4px 12px;
        border-radius: 12px;
        font-size: 14px;
        font-weight: 600;
    }

    .badge-correct {
        background: #d1f
    }
 </style>